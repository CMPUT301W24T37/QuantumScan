Index: app/src/main/java/com/example/quantumscan/FireStoreBridge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quantumscan;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.FieldPath;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{\n    private FirebaseFirestore db;\n    private CollectionReference collectionName;\n    private Query query;\n\n    public FireStoreBridge(String collectionName){\n        this.db = FirebaseFirestore.getInstance();\n        this.collectionName = this.db.collection(collectionName);\n        this.query = this.collectionName;\n\n    }\n    private FirebaseFirestore getDb() {\n        return db;\n    }\n\n    private CollectionReference getCollectionName() {\n        return collectionName;\n    }\n\n    public interface OnUserRetrievedListener {\n        void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles);\n    }\n\n    public interface OnEventRetrievedListener {\n        void onEventRetrieved(ArrayList<Event> event, ArrayList<String> organizerList);\n\n    }\n\n    private interface OnEventRetrievedListenerHelper{\n        void onAttendeeRetrieved(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n\n\n    public void retrieveUser(String userID, OnUserRetrievedListener listener) {\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), userID);\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    User user = new User(null,null,null, null,null); // Create a new User object\n                    ArrayList<String> attendeeRoles = new ArrayList<String>();\n                    ArrayList<String> organizerRoles = new ArrayList<String>();\n                    for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                        // Retrieve user data from document and set properties of the User object\n                        user.setName(documentSnapshot.getString(\"name\"));\n                        user.setProfilePicture(documentSnapshot.getString(\"profilePicture\"));\n                        user.setPhone(documentSnapshot.getString(\"phone\"));\n                        user.setUniversity(documentSnapshot.getString(\"university\"));\n                        user.setEmail(documentSnapshot.getString(\"email\"));\n                        List<String> list1 = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n                        List<String> list2 = (List<String>) documentSnapshot.get(\"organizerRoles\");\n                        attendeeRoles = (ArrayList<String>) list1;\n                        organizerRoles = (ArrayList<String>) list2;\n\n                    }\n\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onUserRetrieved(user, attendeeRoles, organizerRoles);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n                    listener.onUserRetrieved(null,null,null);\n                }\n            }\n        });\n    }\n    public void retrieveEvent(String eventId, OnEventRetrievedListener listener){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n    public void retrieveAllEvent(OnEventRetrievedListener listener) {\n        this.query = this.collectionName;\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                       organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n    private void retrieveAllEventHelper(CollectionReference attendeeListRef, OrganizerFireBaseHolder organizer){\n        // TODO: This is for check in status retrieve\n        /*\n        retrieve attendeelist in each event documentation\n         */\n        attendeeListRef.document().collection(\"attendeeList\").get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            ArrayList<AttendeeFireBaseHolder> attendeeFireBaseHolders = new ArrayList<>();\n\n                            for (QueryDocumentSnapshot documentSnapshot1 : task.getResult()) {\n                                AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                                attendee.setAttendeeId(documentSnapshot1.getString(\"id\"));\n                                attendee.setCheckInStatus(documentSnapshot1.getBoolean(\"checkedIn\"));\n                                attendeeFireBaseHolders.add(attendee);\n                            }\n\n                        }else {\n                            // Handle the case where the task failed\n                            Exception e = task.getException();\n                            System.out.println(\"Query failed: \" + e.getMessage());\n                            // Notify the listener with a null user object\n\n                        }\n\n                    }\n                });\n    }\n\n    public void updateUser(User user){\n\n\n        String userID = user.getId();\n        this.collectionName.document(userID)\n                .set(user).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n\n    public void updateEvent(Event eventInfo){\n        String eventId= eventInfo.getId();\n        ArrayList<AttendeeListFireBaseHolder> attendeeList = new ArrayList<>();\n        for (int i = 0; i < eventInfo.getAttendees().size(); i++){\n            AttendeeListFireBaseHolder attendee = new AttendeeListFireBaseHolder(\n                    eventInfo.getAttendees().get(i).getUserID(),\n                    eventInfo.getAttendees().get(i).getCheckIn(),\n                    eventInfo.getAttendees().get(i).getUserName(),\n                    eventInfo.getAttendees().get(i).getCheckInAccount());\n            attendeeList.add(attendee);\n        }//eventInfo.getOrganizer().getUser().getId()\n        EventFireBaseHolder event = new EventFireBaseHolder(\n                eventInfo.getAnnouncement(),\n                eventInfo.getDescription(),\n                eventInfo.getEventCode(),\n                eventId,\n                eventInfo.getOrganizer().getUser().getId(),\n                eventInfo.getPosterCode(),\n                eventInfo.getTitle(),\n                attendeeList);\n        this.collectionName.document(eventId).set(eventInfo)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n    public void updateEventDescription(String eventId, String description){\n\n        this.collectionName.document(eventId).update(\"description\", description)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n    @Override\n    public void updateEventImage(String eventId, String imageURL){\n        this.collectionName.document(eventId).update(\"posterCode\", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java
--- a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	
+++ b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{
+public class FireStoreBridge {
     private FirebaseFirestore db;
     private CollectionReference collectionName;
     private Query query;
@@ -275,6 +275,7 @@
                     }
                 });
     }
+    /*
     @Override
     public void updateEventImage(String eventId, String imageURL){
         this.collectionName.document(eventId).update("posterCode", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {
@@ -291,4 +292,6 @@
                 });
 
     }
+
+     */
 }
Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n    }\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n                    // Optionally, notify other parts of your app about the selected image\n                        imageUrlUploadListener listener = null;\n                        listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n        //System.out.println(imageUri);\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n                // Reading text from EditText\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                String idText = editTextID.getText().toString();\n\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
--- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	
+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	
@@ -20,9 +20,9 @@
 
     // Create an ActivityResultLauncher instance directly within the Activity
 
-    public interface imageUrlUploadListener{
-        void updateEventImage(String eventId, String imageURL);
-    }
+    //public interface imageUrlUploadListener{
+        //void updateEventImage(String eventId, String imageURL);
+    //}
     private final ActivityResultLauncher<Intent> activityResultLauncher =
             registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
                 if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
@@ -30,8 +30,8 @@
                     System.out.println(imageUri);
                     // Handle the imageUri, e.g., display it or prepare it for upload
                     // Optionally, notify other parts of your app about the selected image
-                        imageUrlUploadListener listener = null;
-                        listener.updateEventImage("asdf", imageUri.toString());
+                        //imageUrlUploadListener listener = null;
+                        //listener.updateEventImage("asdf", imageUri.toString());
                 } else {
                     Toast.makeText(OrganizerCreateEvent.this, "Please select an image", Toast.LENGTH_SHORT).show();
                 }
