Index: app/src/main/res/layout/fragment_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ProfileFragment\">\r\n\r\n    <!-- TODO: Update blank fragment layout -->\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <ImageView\r\n            android:id=\"@+id/profileImage\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:layout_constraintBottom_toTopOf=\"@id/userNameText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:layout_marginTop=\"120dp\"\r\n            android:src=\"@drawable/ic_profile\"/>\r\n\r\n        <TextView\r\n            android:id=\"@+id/userNameText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"User Name\"\r\n            android:textSize=\"26dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/profileImage\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/userUniversityText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            android:layout_marginTop=\"100dp\"\r\n            tools:layout_editor_absoluteX=\"141dp\"\r\n            tools:layout_editor_absoluteY=\"348dp\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/userUniversityText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"University\"\r\n            android:textSize=\"20dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userNameText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/userPhoneNumbText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"Phone Number\"\r\n            android:textSize=\"20dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userUniversityText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/userEmailText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"email\"\r\n            android:textSize=\"20dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userPhoneNumbText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/userInfoText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"user info\"\r\n            android:textSize=\"20dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userEmailText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/showInfoDialogButton\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Edit\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            android:layout_marginTop=\"60dp\"\r\n\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userInfoText\" />\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_profile.xml b/app/src/main/res/layout/fragment_profile.xml
--- a/app/src/main/res/layout/fragment_profile.xml	(revision 291b2b53de9aa57e0c0df8fb1f7ac931badcf0fc)
+++ b/app/src/main/res/layout/fragment_profile.xml	(date 1711934848482)
@@ -34,7 +34,7 @@
             app:layout_constraintBottom_toTopOf="@+id/userUniversityText"
             app:layout_constraintStart_toStartOf="parent"
             app:layout_constraintEnd_toEndOf="parent"
-            android:layout_marginTop="100dp"
+            android:layout_marginTop="50dp"
             tools:layout_editor_absoluteX="141dp"
             tools:layout_editor_absoluteY="348dp" />
 
@@ -42,7 +42,6 @@
             android:id="@+id/userUniversityText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
             android:hint="University"
             android:textSize="20dp"
             app:layout_constraintTop_toBottomOf="@+id/userNameText"
@@ -54,7 +53,6 @@
             android:id="@+id/userPhoneNumbText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
             android:hint="Phone Number"
             android:textSize="20dp"
             app:layout_constraintTop_toBottomOf="@+id/userUniversityText"
@@ -66,7 +64,6 @@
             android:id="@+id/userEmailText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
             android:hint="email"
             android:textSize="20dp"
             app:layout_constraintTop_toBottomOf="@+id/userPhoneNumbText"
@@ -78,7 +75,6 @@
             android:id="@+id/userInfoText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_gravity="center"
             android:hint="user info"
             android:textSize="20dp"
             app:layout_constraintTop_toBottomOf="@+id/userEmailText"
@@ -92,8 +88,8 @@
             android:layout_height="wrap_content"
             android:text="Edit"
             app:layout_constraintEnd_toEndOf="parent"
-            android:layout_marginTop="60dp"
-
+            android:layout_marginTop="80dp"
+            android:layout_marginRight="30dp"
             app:layout_constraintTop_toBottomOf="@+id/userInfoText" />
 
     </androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/java/com/example/quantumscan/FireStoreBridge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quantumscan;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.util.Log;\nimport android.widget.ImageView;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.FieldPath;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageReference;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{\n    private FirebaseFirestore db;\n    private CollectionReference collectionName;\n    private String c;\n    private Query query;\n    private FirebaseStorage storage;\n\n    public FireStoreBridge(String collectionName){\n        c = collectionName;\n        this.db = FirebaseFirestore.getInstance();\n        this.collectionName = this.db.collection(collectionName);\n        this.query = this.collectionName;\n        this.storage = FirebaseStorage.getInstance();\n    }\n    public FirebaseFirestore getDb() {\n        return db;\n    }\n\n    public CollectionReference getCollectionName() {\n        return collectionName;\n    }\n\n    public interface OnUserRetrievedListener {\n        void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles);\n    }\n\n    public interface OnEventRetrievedListener {\n        void onEventRetrieved(ArrayList<Event> event, ArrayList<String> organizerList);\n\n    }\n\n    private interface OnEventRetrievedListenerHelper{\n        void onAttendeeRetrieved(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    private interface OnCheckedInListener{\n        void onCheckedInListener(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param userID the height of the rectangle, must be non-negative\n     */\n    public void retrieveUser(String userID, OnUserRetrievedListener listener) {\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), userID);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    User user = new User(null,null,null, null,null);\n                    ArrayList<String> attendeeRoles = new ArrayList<String>();\n                    ArrayList<String> organizerRoles = new ArrayList<String>();\n                    for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                        // Retrieve user data from document and set properties of the User object\n                        user.setName(documentSnapshot.getString(\"name\"));\n                        user.setProfilePicture(documentSnapshot.getString(\"profilePicture\"));\n                        user.setPhone(documentSnapshot.getString(\"phone\"));\n                        user.setUniversity(documentSnapshot.getString(\"university\"));\n                        user.setEmail(documentSnapshot.getString(\"email\"));\n                        user.setId(documentSnapshot.getString(\"id\"));\n                        List<String> list1 = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n                        List<String> list2 = (List<String>) documentSnapshot.get(\"organizerRoles\");\n                        attendeeRoles = (ArrayList<String>) list1;\n                        organizerRoles = (ArrayList<String>) list2;\n\n                    }\n\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onUserRetrieved(user, attendeeRoles, organizerRoles);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n                    listener.onUserRetrieved(null,null,null);\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param eventId the height of the rectangle, must be non-negative\n     */\n\n    public void retrieveEvent(String eventId, OnEventRetrievedListener listener){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n\n\n                    }\n                    // Notify the listener with the retrieved user object is complete\n\n\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * */\n    public void retrieveAllEvent(OnEventRetrievedListener listener) {\n        this.query = this.collectionName;\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n\n                       organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param attendeeListRef a interface that contain retrieved data which is stored in a firebase holder\n     * @param organizer a interface that contain retrieved data which is stored in a firebase holder\n     *\n     * */\n    private void retrieveAllEventHelper(CollectionReference attendeeListRef, OrganizerFireBaseHolder organizer){\n        // TODO: This is for check in status retrieve\n        /*\n        retrieve attendeelist in each event documentation\n         */\n        attendeeListRef.document().collection(\"attendeeList\").get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            ArrayList<AttendeeFireBaseHolder> attendeeFireBaseHolders = new ArrayList<>();\n\n                            for (QueryDocumentSnapshot documentSnapshot1 : task.getResult()) {\n                                AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                                attendee.setCheckInCount(Objects.requireNonNull(documentSnapshot1.getLong(\"checkInCount\")).intValue());\n                                attendee.setName(documentSnapshot1.getString(\"name\"));\n                                attendee.setId(documentSnapshot1.getString(\"id\"));\n                                attendee.setCheckedIn(documentSnapshot1.getBoolean(\"checkedIn\"));\n                                attendeeFireBaseHolders.add(attendee);\n                            }\n\n                        }else {\n                            // Handle the case where the task failed\n                            Exception e = task.getException();\n                            System.out.println(\"Query failed: \" + e.getMessage());\n                            // Notify the listener with a null user object\n\n                        }\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param user a interface that contain retrieved data which is stored in a firebase holder*\n     * */\n    public void updateUser(UserFireBaseHolder user){\n        String userID = user.getId();\n        this.collectionName.document(userID).update(\"name\", user.getName());\n        this.collectionName.document(userID).update(\"university\", user.getUniversity());\n        this.collectionName.document(userID).update(\"phone\", user.getPhone());\n        this.collectionName.document(userID).update(\"email\", user.getEmail());\n    }\n\n    public void updateProfilePhoto(String userId, String profilePhoto){\n        this.collectionName.document(userId).update(\"profilePicture\", profilePhoto);\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEvent(Event eventInfo, String organizerID){\n        // get event id\n        String eventId= eventInfo.getId();\n        System.out.println(eventId);\n\n        // create an attendeeList that will be added to organizer <both are firebase holder>\n        ArrayList<AttendeeListFireBaseHolder> attendeeList = new ArrayList<>();\n        for (int i = 0; i < eventInfo.getAttendees().size(); i++){\n            AttendeeListFireBaseHolder attendee = new AttendeeListFireBaseHolder(\n                    eventInfo.getAttendees().get(i).getId(),\n                    eventInfo.getAttendees().get(i).isCheckedIn(),\n                    eventInfo.getAttendees().get(i).getName(),\n                    eventInfo.getAttendees().get(i).getCheckInCount());\n            attendeeList.add(attendee);\n        }//eventInfo.getOrganizer().getUser().getId() eventInfo.getOrganizer().getUser().getId()\n        EventFireBaseHolder event = new EventFireBaseHolder(\n                eventInfo.getAnnouncement(),\n                eventInfo.getDescription(),\n                eventInfo.getEventCode(),\n                eventId,\n                organizerID,\n                eventInfo.getPosterCode(),\n                eventInfo.getTitle());\n        this.updateEventHelper(eventId, organizerID);\n        this.collectionName.document(eventId).set(event)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    private void updateEventHelper(String eventID, String organizerID){\n        CollectionReference userCollection = this.getDb().collection(\"USER\");\n        userCollection.document(organizerID).update(\"organizerRoles\", FieldValue.arrayUnion(eventID))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });;\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEventDescription(String eventId, String description){\n\n        this.collectionName.document(eventId).update(\"description\", description)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    @Override\n    public void updateEventImage(String eventId, String imageURL){\n        this.collectionName.document(eventId).update(\"posterCode\", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n    @Override\n    public void uploadEventImage(Event newEvent, String evenID, Uri imageUri) {\n        StorageReference imageRef = storage.getReference().child(newEvent.getId() + \".jpg\");\n        imageRef.putFile(imageUri);\n    }\n\n    public void updateImage(String EventID, ImageView imageView, Uri imageUri){\n        StorageReference desertRef = storage.getReference().child(EventID+\"jpg\");\n        desertRef.delete();\n        StorageReference imageRef = storage.getReference().child(EventID + \".jpg\");\n        imageRef.putFile(imageUri);\n        //displayImage(EventID, imageView);\n\n    }\n    public void displayImage(String EventID, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(EventID+\".jpg\");\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n\n    }\n\n    public void displayProfile(String pictureName, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(\"default_avatars/\"+pictureName);\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeCheckIn(String userId, String eventId){\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkedIn\", true)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkInCount\", FieldValue.increment(1))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n    }\n\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void retrieveAttendeeCheckIn(String eventId, OnCheckedInListener listener){\n        this.query = this.collectionName.document(eventId).collection(\"attendeeList\");\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                ArrayList<AttendeeFireBaseHolder> attendeeList = new ArrayList<>();\n                if (task.isSuccessful()) {\n                    for (QueryDocumentSnapshot document : task.getResult()) {\n                        AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                        attendee.setCheckInCount(document.getLong(\"checkInCount\").intValue());\n                        attendee.setName(document.getString(\"name\"));\n                        attendee.setId(document.getId());\n                        attendee.setCheckedIn(document.getBoolean(\"checkedIn\"));\n                        attendeeList.add(attendee);\n                    }\n                } else {\n\n                }\n                listener.onCheckedInListener(attendeeList);\n            }\n\n        });\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n\n\n    public void updateAttendeeSignUpToEvent(String userId, String eventId){\n        CollectionReference newCollection =  getDb().collection(\"EVENT\");\n        Query newQuery;\n        newQuery = newCollection.whereEqualTo(FieldPath.documentId(), eventId);\n        newQuery.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                    long attendeeLimit = documentSnapshot.getLong(\"attendeeLimit\");\n                    long currentTotalAttendee = documentSnapshot.getLong(\"currentTotalAttendee\");\n                    if (currentTotalAttendee < attendeeLimit){\n                        updateAttendeeSignUpHelper(userId, eventId);\n                    }else{\n\n                    }\n                }\n\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n\n    public void updateAttendeeSignUpHelper(String userId, String eventId){\n        CollectionReference eventCollection =  getDb().collection(\"EVENT\");\n        CollectionReference userCollection =  getDb().collection(\"USER\");\n        System.out.println(userId+\"1234567890\");\n\n        Query newQuery = userCollection.whereEqualTo(FieldPath.documentId(), userId);\n\n        newQuery.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot document : task.getResult()) {\n                    if (task.isSuccessful()) {\n                        attendee.setName(document.getString(\"name\"));\n                        eventCollection.document(eventId).collection(\"attendeeList\").document(userId).set(attendee)\n                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                    @Override\n                                    public void onSuccess(Void aVoid) {\n                                        Log.d(TAG, \"Welcome !\");\n                                    }\n                                })\n                                .addOnFailureListener(new OnFailureListener() {\n                                    @Override\n                                    public void onFailure(@NonNull Exception e) {\n                                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                                    }\n                                });\n\n                        userCollection.document(userId).update(\"attendeeRoles\", FieldValue.arrayUnion(eventId))\n                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                    @Override\n                                    public void onSuccess(Void aVoid) {\n                                        Log.d(TAG, \"Welcome !\");\n                                    }\n                                })\n                                .addOnFailureListener(new OnFailureListener() {\n                                    @Override\n                                    public void onFailure(@NonNull Exception e) {\n                                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                                    }\n                                });\n                    }else{\n\n                    }\n\n                }\n            }\n        });\n\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java
--- a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(revision 291b2b53de9aa57e0c0df8fb1f7ac931badcf0fc)
+++ b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(date 1711934620028)
@@ -411,6 +411,16 @@
         imageRef.putFile(imageUri);
     }
 
+    public void uploadProfileImage(String userID, Uri imageUri) {
+        StorageReference imageRef = storage.getReference().child("default_avatars/"+ userID + ".jpg");
+        imageRef.putFile(imageUri);
+    }
+
+    public void updateProfileImage(){
+
+    }
+
+
     public void updateImage(String EventID, ImageView imageView, Uri imageUri){
         StorageReference desertRef = storage.getReference().child(EventID+"jpg");
         desertRef.delete();
