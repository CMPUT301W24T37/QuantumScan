Index: app/src/main/res/layout/fragment_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ProfileFragment\">\r\n\r\n    <!-- TODO: Update blank fragment layout -->\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/profilePictureContainer\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:layout_constraintBottom_toTopOf=\"@id/userNameText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:layout_marginTop=\"50dp\"\r\n            android:clickable=\"true\"\r\n            android:focusable=\"true\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/profileImage\"\r\n                android:layout_width=\"150dp\"\r\n                android:layout_height=\"150dp\"\r\n                android:src=\"@drawable/ic_profile\"/>\r\n\r\n            <ImageView\r\n                android:id=\"@+id/imageView6\"\r\n                android:layout_width=\"25dp\"\r\n                android:layout_height=\"25dp\"\r\n                android:src=\"@drawable/ic_create\"\r\n                android:layout_gravity=\"bottom|end\"\r\n                />\r\n        </FrameLayout>\r\n\r\n        <EditText\r\n            android:id=\"@+id/userNameText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"User Name\"\r\n            android:textSize=\"26dp\"\r\n            android:enabled=\"false\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/profilePictureContainer\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/userUniversityText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            android:layout_marginTop=\"10dp\"\r\n            tools:layout_editor_absoluteX=\"141dp\"\r\n            tools:layout_editor_absoluteY=\"348dp\" />\r\n\r\n        <EditText\r\n            android:id=\"@+id/userUniversityText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"University\"\r\n            android:textSize=\"20dp\"\r\n            android:enabled=\"false\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userNameText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <EditText\r\n            android:id=\"@+id/userPhoneNumbText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"Phone Number\"\r\n            android:textSize=\"20dp\"\r\n            android:enabled=\"false\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userUniversityText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <EditText\r\n            android:id=\"@+id/userEmailText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"email\"\r\n            android:textSize=\"20dp\"\r\n            android:enabled=\"false\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userPhoneNumbText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <EditText\r\n            android:id=\"@+id/userInfoText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:hint=\"user info\"\r\n            android:textSize=\"20dp\"\r\n            android:enabled=\"false\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userEmailText\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"156dp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/showInfoDialogButton\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:text=\"Edit\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n\r\n            app:layout_constraintTop_toBottomOf=\"@+id/userInfoText\" />\r\n\r\n\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n</FrameLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_profile.xml b/app/src/main/res/layout/fragment_profile.xml
--- a/app/src/main/res/layout/fragment_profile.xml	(revision f3ac767ef56982ed71c4f5a1d6d24496d2b9e324)
+++ b/app/src/main/res/layout/fragment_profile.xml	(date 1712459334131)
@@ -7,7 +7,7 @@
     tools:context=".ProfileFragment">
 
     <!-- TODO: Update blank fragment layout -->
-
+    
     <androidx.constraintlayout.widget.ConstraintLayout
         android:layout_width="match_parent"
         android:layout_height="match_parent">
Index: app/src/main/java/com/example/quantumscan/FireStoreBridge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quantumscan;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.location.Location;\nimport android.net.Uri;\nimport android.util.Log;\nimport android.widget.ImageView;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.Timestamp;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.EventListener;\nimport com.google.firebase.firestore.FieldPath;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.GeoPoint;\nimport com.google.firebase.firestore.FirebaseFirestoreException;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageReference;\n\nimport java.lang.reflect.Array;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{\n    private FirebaseFirestore db;\n    private CollectionReference collectionName;\n    private String c;\n    private Query query;\n    private FirebaseStorage storage;\n\n    public FireStoreBridge(String collectionName){\n        c = collectionName;\n        this.db = FirebaseFirestore.getInstance();\n        this.collectionName = this.db.collection(collectionName);\n        this.query = this.collectionName;\n        this.storage = FirebaseStorage.getInstance();\n    }\n    public FirebaseFirestore getDb() {\n        return db;\n    }\n\n    public CollectionReference getCollectionName() {\n        return collectionName;\n    }\n\n\n\n    public interface OnUserRetrievedListener {\n        void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles);\n    }\n\n    public interface OnEventRetrievedListener {\n        void onEventRetrieved(ArrayList<Event> event, ArrayList<String> organizerList);\n\n    }\n\n    private interface OnEventRetrievedListenerHelper{\n        void onAttendeeRetrieved(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    interface OnCheckedInListener{\n        void onCheckedInListener(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n\n    public interface OnUserCheckInListener{\n        void onCheckUserJoin(boolean attendeeExist);\n    }\n\n    public interface OnRetrieveAnnouncement{\n        void onRetrieveAnnouncement(Announcement announcement);\n    }\n    public interface OnRetrieveEventAnnouncement{\n        void onRetrieveEventAnnouncement (ArrayList<String> announcements);\n    }\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param userID the height of the rectangle, must be non-negative\n     */\n    public void retrieveUser(String userID, OnUserRetrievedListener listener) {\n        CollectionReference userCollection = getDb().collection(\"USER\");\n        DocumentReference user = userCollection.document(userID);\n        user.addSnapshotListener(new EventListener<DocumentSnapshot>() {\n            @Override\n            public void onEvent(@Nullable DocumentSnapshot documentSnapshot, @Nullable FirebaseFirestoreException error) {\n                try  {\n                        User user = new User(null,null,null, null,null);\n                        ArrayList<String> attendeeRoles = new ArrayList<String>();\n                        ArrayList<String> organizerRoles = new ArrayList<String>();\n\n                        user.setName(documentSnapshot.getString(\"name\"));\n                        user.setProfilePicture(documentSnapshot.getString(\"profilePicture\"));\n                        user.setPhone(documentSnapshot.getString(\"phone\"));\n                        user.setUniversity(documentSnapshot.getString(\"university\"));\n                        user.setEmail(documentSnapshot.getString(\"email\"));\n                        user.setId(documentSnapshot.getString(\"id\"));\n                        List<String> list1 = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n                        List<String> list2 = (List<String>) documentSnapshot.get(\"organizerRoles\");\n                        attendeeRoles = (ArrayList<String>) list1;\n                        organizerRoles = (ArrayList<String>) list2;\n\n\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onUserRetrieved(user, attendeeRoles, organizerRoles);\n                } catch (Exception e){\n\n                    listener.onUserRetrieved(null,null,null);\n                }\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param eventId the height of the rectangle, must be non-negative\n     */\n\n    public void retrieveEvent(String eventId, OnEventRetrievedListener listener){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n\n\n                    }\n                    // Notify the listener with the retrieved user object is complete\n\n\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * */\n    public void retrieveAllEvent(OnEventRetrievedListener listener) {\n        this.query = this.collectionName;\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param attendeeListRef a interface that contain retrieved data which is stored in a firebase holder\n     * @param organizer a interface that contain retrieved data which is stored in a firebase holder\n     *\n     * */\n    private void retrieveAllEventHelper(CollectionReference attendeeListRef, OrganizerFireBaseHolder organizer){\n        // TODO: This is for check in status retrieve\n        /*\n        retrieve attendeelist in each event documentation\n         */\n        attendeeListRef.document().collection(\"attendeeList\").get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            ArrayList<AttendeeFireBaseHolder> attendeeFireBaseHolders = new ArrayList<>();\n\n                            for (QueryDocumentSnapshot documentSnapshot1 : task.getResult()) {\n                                AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                                attendee.setCheckInCount(Objects.requireNonNull(documentSnapshot1.getLong(\"checkInCount\")).intValue());\n                                attendee.setName(documentSnapshot1.getString(\"name\"));\n                                attendee.setId(documentSnapshot1.getString(\"id\"));\n                                attendee.setCheckedIn(documentSnapshot1.getBoolean(\"checkedIn\"));\n                                attendeeFireBaseHolders.add(attendee);\n                            }\n\n                        }else {\n                            // Handle the case where the task failed\n                            Exception e = task.getException();\n                            System.out.println(\"Query failed: \" + e.getMessage());\n                            // Notify the listener with a null user object\n\n                        }\n                    }\n                });\n    }\n    public void createUser(UserFireBaseHolder user){\n        String userID = user.getId();\n        this.collectionName.document(userID)\n                .set(user).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param user a interface that contain retrieved data which is stored in a firebase holder*\n     * */\n    public void updateUser(UserFireBaseHolder user){\n        String userID = user.getId();\n        this.collectionName.document(userID).update(\"name\", user.getName());\n        this.collectionName.document(userID).update(\"university\", user.getUniversity());\n        this.collectionName.document(userID).update(\"phone\", user.getPhone());\n        this.collectionName.document(userID).update(\"email\", user.getEmail());\n    }\n\n    public void updateProfilePhoto(String userId, String profilePhoto){\n        this.collectionName.document(userId).update(\"profilePicture\", profilePhoto);\n    }\n\n    /** updateEventHelper will take in a eventID and a organizerID. organizerID will be used to identify\n     user in USER collection. eventID will be added into organizerRoles filed to keep track which event\n     are organized by the user\n     @param eventInfo {@link Event}\n     @param organizerID {@link String}\n     **/\n    public void updateEvent(Event eventInfo, String organizerID, String startTime, String endTime){\n        // get event id\n        String eventId= eventInfo.getId();\n        CollectionReference eventCollection = getDb().collection(\"EVENT\");\n\n        EventFireBaseHolder event = new EventFireBaseHolder(\n                eventInfo.getAnnouncement(),\n                eventInfo.getDescription(),\n                eventInfo.getEventCode(),\n                eventId,\n                organizerID,\n                eventInfo.getPosterCode(),\n                eventInfo.getTitle(),\n                eventInfo.getAttendeeLimit(),\n                eventInfo.getCurrentTotalAttendee());\n\n        this.updateEventHelper(eventId, organizerID);\n        eventCollection.document(eventId).set(event)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        updateStartTime(eventId, startTime);\n                        updateEndTime(eventId, endTime);\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n\n\n    }\n\n    /** updateEventHelper will take in a eventID and a organizerID. organizerID will be used to identify\n     user in USER collection. eventID will be added into organizerRoles filed to keep track which event\n     are organized by the user\n     @param eventID {@link String}\n     @param organizerID {@link String}\n     **/\n    private void updateEventHelper(String eventID, String organizerID){\n        CollectionReference userCollection = this.getDb().collection(\"USER\");\n        userCollection.document(organizerID).update(\"organizerRoles\", FieldValue.arrayUnion(eventID))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });;\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEventDescription(String eventId, String description){\n\n        this.collectionName.document(eventId).update(\"description\", description)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    @Override\n    public void updateEventImage(String eventId, String imageURL){\n        this.collectionName.document(eventId).update(\"posterCode\", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    @Override\n    public void uploadEventImage(Event newEvent, String evenID, Uri imageUri) {\n        StorageReference imageRef = storage.getReference().child(newEvent.getId() + \".jpg\");\n        imageRef.putFile(imageUri);\n    }\n\n    public void updateImage(String EventID, ImageView imageView, Uri imageUri){\n        StorageReference desertRef = storage.getReference().child(EventID+\"jpg\");\n        desertRef.delete();\n        StorageReference imageRef = storage.getReference().child(EventID + \".jpg\");\n        imageRef.putFile(imageUri);\n        //displayImage(EventID, imageView);\n\n    }\n\n    public void updatePhoto(String userID, Uri imageUri) {\n        StorageReference desertRef = storage.getReference().child(\"default_avatars/\" + userID + \".jpg\");\n        desertRef.delete();\n        StorageReference imageRef = storage.getReference().child(\"default_avatars/\" + userID + \".jpg\");\n        imageRef.putFile(imageUri);\n        this.collectionName.document(userID).update(\"profilePicture\", userID + \".jpg\");\n    }\n\n\n    public void displayImage(String EventID, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(EventID+\".jpg\");\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n\n    }\n\n    public void displayProfile(String pictureName, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(\"default_avatars/\"+pictureName);\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n    }\n\n    public void updateEventAnnouncement(String eventId,String announcement){\n        CollectionReference eventCollection = getDb().collection(\"EVENT\");\n        DocumentReference eventDoc = eventCollection.document(eventId);\n        eventDoc.update(\"announcements\", FieldValue.arrayUnion(announcement))\n                .addOnSuccessListener(aVoid -> System.out.println(\"Array updated successfully.\"))\n                .addOnFailureListener(e -> System.err.println(\"Error updating array: \" + e.getMessage()));\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeCheckIn(String userId, String eventId){\n        CollectionReference EventCollection = getDb().collection(\"EVENT\");\n        System.out.println(\"chekd in fb\" + userId);\n\n        System.out.println(\"chekd in fb\" + eventId);\n\n        EventCollection.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkedIn\", true)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n        EventCollection.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkInCount\", FieldValue.increment(1))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n    }\n\n    public void updateAttendeeCheckInWithLocation(String userId, String eventId, Location location){\n        CollectionReference EventCollection = getDb().collection(\"EVENT\");\n        System.out.println(\"chekd in fb\" + userId);\n\n        System.out.println(\"chekd in fb\" + eventId);\n\n        EventCollection.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkedIn\", true)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n        EventCollection.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkInCount\", FieldValue.increment(1))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n        updateAttendeeLocation( userId,  eventId,  location);\n\n    }\n\n    public void updateAttendeeLocation(String userId, String eventId, Location location) {\n        CollectionReference EventCollection = getDb().collection(\"EVENT\");\n        GeoPoint geopoint = null;\n        if (location != null) {\n            geopoint = new GeoPoint(location.getLatitude(), location.getLongitude());\n            Log.d(TAG, \"successfully get the location\");\n        }\n        else {Log.w(TAG, \"the location is null (will update as null)\");}\n        EventCollection.document(eventId).collection(\"attendeeList\").document(userId).update(\"location\", geopoint)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"Geopoint location updated successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"Geopoint location updated failed\");\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void retrieveAttendeeCheckIn(String eventId, OnCheckedInListener listener){\n        CollectionReference collection = getDb().collection(\"EVENT\");\n        CollectionReference attendeeList = collection.document(eventId).collection(\"attendeeList\");\n\n            attendeeList.addSnapshotListener(new EventListener<QuerySnapshot>() {\n                @Override\n                public void onEvent(@Nullable QuerySnapshot value, @Nullable FirebaseFirestoreException error) {\n                    try {\n                        ArrayList<AttendeeFireBaseHolder> attendeeList = new ArrayList<>();\n\n                        int count = 0;\n                        for (QueryDocumentSnapshot document : value) {\n                            AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                            attendee.setCheckInCount(document.getLong(\"checkInCount\").intValue());\n                            attendee.setName(document.getString(\"name\"));\n                            attendee.setId(document.getId());\n                            attendee.setCheckedIn(document.getBoolean(\"checkedIn\"));\n                            attendeeList.add(attendee);\n                            count++;\n                        }\n\n\n                        listener.onCheckedInListener(attendeeList);\n                    } catch (Exception e){\n                        System.out.println(error);\n                        listener.onCheckedInListener(null);\n                    }\n                }\n            }\n        );\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n\n\n    public void updateAttendeeSignUpToEvent(String userId, String eventId){\n        CollectionReference newCollection =  getDb().collection(\"EVENT\");\n        Query newQuery;\n        newQuery = newCollection.whereEqualTo(FieldPath.documentId(), eventId);\n        newQuery.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                    long attendeeLimit = documentSnapshot.getLong(\"attendeeLimit\");\n                    long currentTotalAttendee = documentSnapshot.getLong(\"currentTotalAttendee\" );\n                    if (currentTotalAttendee < attendeeLimit){\n                        System.out.println(\"before increment\");\n                        newCollection.document(eventId).update(\"currentTotalAttendee\",FieldValue.increment(1));\n                        System.out.println(\"after incremenet\");\n                        updateAttendeeSignUpHelper(userId, eventId);\n\n                    }else{\n                        System.out.println(\"you have reached limit\");\n\n                    }\n                }\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n\n    public void updateAttendeeSignUpHelper(String userId, String eventId){\n        CollectionReference eventCollection =  getDb().collection(\"EVENT\");\n        CollectionReference userCollection =  getDb().collection(\"USER\");\n\n\n        Query newQuery = userCollection.whereEqualTo(FieldPath.documentId(), userId);\n\n        newQuery.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot document : task.getResult()) {\n                    if (task.isSuccessful()) {\n                        attendee.setName(document.getString(\"name\"));\n                        attendee.setId(userId);\n                        eventCollection.document(eventId).collection(\"attendeeList\").document(userId).set(attendee)\n                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                    @Override\n                                    public void onSuccess(Void aVoid) {\n                                        Log.d(TAG, \"Welcome !\");\n                                    }\n                                })\n                                .addOnFailureListener(new OnFailureListener() {\n                                    @Override\n                                    public void onFailure(@NonNull Exception e) {\n                                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                                    }\n                                });\n\n                        userCollection.document(userId).update(\"attendeeRoles\", FieldValue.arrayUnion(eventId))\n                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                    @Override\n                                    public void onSuccess(Void aVoid) {\n                                        Log.d(TAG, \"Welcome !\");\n                                    }\n                                })\n                                .addOnFailureListener(new OnFailureListener() {\n                                    @Override\n                                    public void onFailure(@NonNull Exception e) {\n                                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                                    }\n                                });\n                    }else{\n\n                    }\n                }\n            }\n        });\n\n    }\n\n    public void checkAttendeeExist(String userId, String eventId, OnUserCheckInListener listener){\n        System.out.println(\"before crash,\" + eventId);\n        CollectionReference attendeeListCollection = getDb().collection(\"EVENT\").document(eventId).collection(\"attendeeList\");\n\n        // Query for documents in the 'attendeeList' collection where the document ID matches 'userId'\n        attendeeListCollection.whereEqualTo(FieldPath.documentId(), userId).get().addOnCompleteListener(task -> {\n            if (task.isSuccessful()) {\n                QuerySnapshot querySnapshot = task.getResult();\n                if (querySnapshot != null && !querySnapshot.isEmpty()) {\n                    // Document with 'userId' exists in the 'attendeeList' collection\n                    System.out.println(\"Document exists\");\n                    listener.onCheckUserJoin(true);\n                } else {\n                    // No document with 'userId' in the 'attendeeList' collection\n                    System.out.println(\"Document doesn't exist\");\n                    listener.onCheckUserJoin(false);\n                }\n            } else {\n                // Handle the error\n                System.out.println(\"Error checking document existence\");\n                // Optionally, call the listener with an error or false\n            }\n        });\n    }\n\n    public void retrieveAnnouncement(String userId, OnRetrieveAnnouncement listener){\n        CollectionReference collectionUser = getDb().collection(\"USER\");\n        // Change from get().addOnCompleteListener to addSnapshotListener for real-time updates\n        DocumentReference userDocRef = collectionUser.document(userId);\n        userDocRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\n\n\n            @Override\n            public void onEvent(@Nullable DocumentSnapshot documentSnapshot, @Nullable FirebaseFirestoreException e) {\n                if (e != null) {\n                    Log.w(TAG, \"Listen failed.\", e);\n                    return;\n                }\n                System.out.println(\"changed detected 1\");\n                if (documentSnapshot != null && documentSnapshot.exists()) {\n                    List<String> eventIdList = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n\n                    for (String docId : eventIdList) {\n                        DocumentReference docRef = getDb().collection(\"EVENT\").document(docId);\n                        docRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\n                            @Override\n                            public void onEvent(@Nullable DocumentSnapshot documentSnapshot, @Nullable FirebaseFirestoreException e) {\n                                if (e != null) {\n                                    Log.w(TAG, \"Event listen failed.\", e);\n                                    return;\n                                }\n\n                                if (documentSnapshot != null && documentSnapshot.exists()) {\n                                    String organizer = documentSnapshot.getString(\"organizer\");\n                                    List<String> announcementList = (List<String>) documentSnapshot.get(\"announcements\");\n                                    String eventTitle = documentSnapshot.getString(\"title\");\n                                    // Ensure there is at least one announcement to retrieve\n                                    if (announcementList != null && !announcementList.isEmpty()) {\n                                        String announcement = announcementList.get(announcementList.size() - 1);\n                                        Announcement annouuncement = new Announcement(organizer, announcement, eventTitle);\n                                        System.out.println(\"changed detected 2\");\n                                        listener.onRetrieveAnnouncement(annouuncement);\n                                    }\n                                } else {\n                                    Log.d(TAG, \"Event data: null\");\n                                    System.out.println(\"changed detected 3\");\n                                    listener.onRetrieveAnnouncement(null);\n                                }\n                            }\n                        });\n                    }\n                } else {\n                    Log.d(TAG, \"User data: null\");\n                    System.out.println(\"changed detected 4\");\n                    listener.onRetrieveAnnouncement(null);\n                }\n                listener.onRetrieveAnnouncement(null);\n                System.out.println(\"changed detected 5\");\n            }\n        });\n    }\n\n\n    public interface OnRetrieveJoinedEvent{\n        void onRetrieveJoinedEvent(ArrayList<EventFireBaseHolder> eventList);\n    }\n\n    public void retrieveJoinedEvent(String userID, OnRetrieveJoinedEvent listener) {\n        System.out.println(\"triggered\" + \" 23\");\n        CollectionReference collectionUser = getDb().collection(\"USER\");\n        DocumentReference userDoc = collectionUser.document(userID);\n        userDoc.addSnapshotListener(new EventListener<DocumentSnapshot>() {\n            @Override\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\n                System.out.println(\"triggered\" + \" 23.5\");\n                System.out.println(userID);\n                CollectionReference collectionEvent = getDb().collection(\"EVENT\");\n                List<String> eventIdList = (List<String>) value.get(\"attendeeRoles\");\n                System.out.println(\"important size \"+ eventIdList.size());\n                Map<String, EventFireBaseHolder> eventMap = new HashMap<>();\n                AtomicInteger remainingEvents = new AtomicInteger(eventIdList.size());\n\n                for (String eventId : eventIdList) {\n                    collectionEvent.document(eventId).get().addOnSuccessListener(documentSnapshot -> {\n\n                        EventFireBaseHolder event = new EventFireBaseHolder();\n\n                        event.setEventCode(documentSnapshot.getString(\"eventCode\"));\n                        event.setOrganizer(documentSnapshot.getString(\"organizer\"));\n                        event.setDescription(documentSnapshot.getString(\"description\"));\n                        event.setTitle(documentSnapshot.getString(\"title\"));\n                        event.setAttendeeLimit(documentSnapshot.getLong(\"attendeeLimit\"));\n                        event.setCurrentTotalAttendee(documentSnapshot.getLong(\"currentTotalAttendee\"));\n                        event.setPosterCode(documentSnapshot.getString(\"organizer\")); // Should this be \"posterCode\" instead of \"organizer\"?\n                        event.setId(documentSnapshot.getId()); // Use documentSnapshot.getId() to ensure the ID is accurately captured\n\n                        synchronized (eventMap) {\n                            eventMap.put(event.getId(), event);\n                        }\n\n                        // Check if all events have been fetched\n                        if (remainingEvents.decrementAndGet() == 0) {\n                            System.out.println(\"size size size size size + \" + eventMap.size());\n                            // Convert map values to a list to match the listener's expected input\n                            ArrayList<EventFireBaseHolder> uniqueEventList = new ArrayList<>(eventMap.values());\n                            System.out.println(\"size size size size size + 2\" + uniqueEventList.size());\n                            listener.onRetrieveJoinedEvent(uniqueEventList);\n                        }\n                    }).addOnFailureListener(e -> {\n                        Log.e(TAG, \"Error fetching event document\", e);\n                        if (remainingEvents.decrementAndGet() == 0) {\n                            ArrayList<EventFireBaseHolder> uniqueEventList = new ArrayList<>(eventMap.values());\n                            listener.onRetrieveJoinedEvent(uniqueEventList); // Or handle error accordingly\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n\n    public void retrieveEventAnnouncement(String eventId, OnRetrieveEventAnnouncement listener){\n        CollectionReference collectionUser = getDb().collection(\"EVENT\");\n        // Change from get().addOnCompleteListener to addSnapshotListener for real-time updates\n        DocumentReference userDocRef = collectionUser.document(eventId);\n        userDocRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\n\n            @Override\n            public void onEvent(@Nullable DocumentSnapshot documentSnapshot, @Nullable FirebaseFirestoreException e) {\n                System.out.println(\"triggered\");\n                ArrayList<String> announcementList = (ArrayList<String>)  documentSnapshot.get(\"announcements\");\n                listener.onRetrieveEventAnnouncement(announcementList);\n                // Ensure there is at least one announcement to retrieve\n            }\n\n        });\n    }\n\n\n    public void retrieveOrganizedEvent(String userID, OnRetrieveJoinedEvent listener) {\n        System.out.println(\"triggered\" + \" 23\");\n        CollectionReference collectionUser = getDb().collection(\"USER\");\n        DocumentReference userDoc = collectionUser.document(userID);\n        userDoc.addSnapshotListener(new EventListener<DocumentSnapshot>() {\n            @Override\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\n                System.out.println(\"triggered\" + \" 23.5\");\n                System.out.println(userID);\n                CollectionReference collectionEvent = getDb().collection(\"EVENT\");\n                List<String> eventIdList = (List<String>) value.get(\"organizerRoles\");\n                if (eventIdList == null) {\n                    return;\n                }\n                //System.out.println(\"important size \"+ eventIdList.size());\n                Map<String, EventFireBaseHolder> eventMap = new HashMap<>();\n                AtomicInteger remainingEvents = new AtomicInteger(eventIdList.size());\n\n                for (String eventId : eventIdList) {\n                    collectionEvent.document(eventId).get().addOnSuccessListener(documentSnapshot -> {\n\n                        EventFireBaseHolder event = new EventFireBaseHolder();\n\n                        event.setEventCode(documentSnapshot.getString(\"eventCode\"));\n                        event.setOrganizer(documentSnapshot.getString(\"organizer\"));\n                        event.setDescription(documentSnapshot.getString(\"description\"));\n                        event.setTitle(documentSnapshot.getString(\"title\"));\n                        event.setAttendeeLimit(documentSnapshot.getLong(\"attendeeLimit\"));\n                        event.setCurrentTotalAttendee(documentSnapshot.getLong(\"currentTotalAttendee\"));\n                        event.setPosterCode(documentSnapshot.getString(\"organizer\")); // Should this be \"posterCode\" instead of \"organizer\"?\n                        event.setId(documentSnapshot.getId()); // Use documentSnapshot.getId() to ensure the ID is accurately captured\n\n                        synchronized (eventMap) {\n                            eventMap.put(event.getId(), event);\n                        }\n\n                        // Check if all events have been fetched\n                        if (remainingEvents.decrementAndGet() == 0) {\n                            System.out.println(\"size size size size size + \" + eventMap.size());\n                            // Convert map values to a list to match the listener's expected input\n                            ArrayList<EventFireBaseHolder> uniqueEventList = new ArrayList<>(eventMap.values());\n                            System.out.println(\"size size size size size + 2\" + uniqueEventList.size());\n                            listener.onRetrieveJoinedEvent(uniqueEventList);\n                        }\n                    }).addOnFailureListener(e -> {\n                        Log.e(TAG, \"Error fetching event document\", e);\n                        if (remainingEvents.decrementAndGet() == 0) {\n                            ArrayList<EventFireBaseHolder> uniqueEventList = new ArrayList<>(eventMap.values());\n                            listener.onRetrieveJoinedEvent(uniqueEventList); // Or handle error accordingly\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    private void updateStartTime(String eventId, String startTime){\n\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n        CollectionReference eventReference = getDb().collection(\"EVENT\");\n        DocumentReference eventDoc = eventReference.document(eventId);\n        try {\n            Date date = sdf.parse(startTime);\n\n            Timestamp timestamp = new Timestamp(date);\n\n            eventDoc.update(\"startTime\", timestamp)\n                    .addOnSuccessListener(aVoid -> System.out.println(\"Event start time updated successfully\"))\n                    .addOnFailureListener(e -> System.err.println(\"Error updating event start time: \" + e.getMessage()));\n\n        } catch (ParseException e) {\n            System.err.println(\"Failed to parse date: \" + e.getMessage());\n        }\n\n    }\n    private void updateEndTime(String eventId, String endTime){\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n        CollectionReference eventReference = getDb().collection(\"EVENT\");\n        DocumentReference eventDoc = eventReference.document(eventId);\n        try {\n            Date date = sdf.parse(endTime);\n\n            Timestamp timestamp = new Timestamp(date);\n\n            eventDoc.update(\"endTime\", timestamp)\n                    .addOnSuccessListener(aVoid -> System.out.println(\"Event start time updated successfully\"))\n                    .addOnFailureListener(e -> System.err.println(\"Error updating event start time: \" + e.getMessage()));\n\n        } catch (ParseException e) {\n            System.err.println(\"Failed to parse date: \" + e.getMessage());\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java
--- a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(revision f3ac767ef56982ed71c4f5a1d6d24496d2b9e324)
+++ b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(date 1712459334172)
@@ -321,6 +321,11 @@
     public void updateProfilePhoto(String userId, String profilePhoto){
         this.collectionName.document(userId).update("profilePicture", profilePhoto);
     }
+    public void deleteProfilePhoto(String userId, String profilePhoto) {
+        this.collectionName.document(userId).update("profilePicture", profilePhoto);
+        StorageReference desertRef = storage.getReference().child("default_avatars/" + userId + ".jpg");
+        desertRef.delete();
+    }
 
     /** updateEventHelper will take in a eventID and a organizerID. organizerID will be used to identify
      user in USER collection. eventID will be added into organizerRoles filed to keep track which event
Index: app/src/main/java/com/example/quantumscan/ProfileFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quantumscan;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\n\r\nimport android.provider.Settings;\r\nimport android.util.Log;\r\nimport android.view.GestureDetector;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\n\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\n\r\nimport org.checkerframework.checker.units.qual.A;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport android.widget.EditText;\r\n\r\npublic class ProfileFragment extends Fragment {\r\n    ImageView imageView;\r\n    EditText userName;\r\n    EditText userUniversity;\r\n    EditText userPhoneNumb;\r\n    EditText userEmail;\r\n    EditText userInfo;\r\n\r\n    String name;\r\n    String university;\r\n    String phoneNumb;\r\n    String email;\r\n    String info;\r\n    String imageUrl;\r\n    private SelectImage selectImage;\r\n    private GestureDetector gestureDetector;\r\n\r\n    private Uri imageUri = null;\r\n\r\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\r\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\r\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\r\n                    imageUri = result.getData().getData();\r\n                    String userId = Settings.Secure.getString(this.getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                    System.out.println(userId);\r\n                    photoUpdate(userId, imageUri);\r\n                } else {\r\n                    Toast.makeText(getContext(), \"Please select an image\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n    String pictureName;\r\n    private FireStoreBridge fb = new FireStoreBridge(\"USER\");\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_profile, container, false);\r\n        userName = view.findViewById(R.id.userNameText);\r\n        userUniversity = view.findViewById(R.id.userUniversityText);\r\n        userPhoneNumb = view.findViewById(R.id.userPhoneNumbText);\r\n        userEmail = view.findViewById(R.id.userEmailText);\r\n        userInfo = view.findViewById(R.id.userInfoText);\r\n        imageView = view.findViewById(R.id.profileImage);\r\n        FrameLayout profilePictureContainer = view.findViewById(R.id.profilePictureContainer);\r\n        String userId = Settings.Secure.getString(this.getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n        FireStoreBridge fb1 = new FireStoreBridge(\"USER\");\r\n\r\n        selectImage = new SelectImage(getActivity(), activityResultLauncher);\r\n        profilePictureContainer.setOnClickListener(v -> selectImage.pickImage());\r\n\r\n        fb1.retrieveUser(userId, new FireStoreBridge.OnUserRetrievedListener() {\r\n            @Override\r\n            public void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles) {\r\n\r\n                imageUrl = user.getProfilePicture();\r\n                if (imageUrl.equals(\"DEFAULT_PFP\")){\r\n                    pictureName = randomPick(user);\r\n                    fb1.updateProfilePhoto(user.getId(), pictureName);\r\n                    fb1.displayProfile(pictureName, imageView);\r\n                }else{\r\n                    fb1.displayProfile(imageUrl, imageView);\r\n                }\r\n\r\n                userName.setText(user.getName());\r\n                userUniversity.setText(user.getUniversity());\r\n                userPhoneNumb.setText(user.getPhone());\r\n                userEmail.setText(user.getEmail());\r\n                userInfo.setText(user.getId());\r\n            }\r\n        });\r\n\r\n\r\n        Button showInfoDialogButton = view.findViewById(R.id.showInfoDialogButton);\r\n        showInfoDialogButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                userName.setEnabled(true);\r\n                userUniversity.setEnabled(true);\r\n                userPhoneNumb.setEnabled(true);\r\n                userEmail.setEnabled(true);\r\n                userInfo.setEnabled(true);\r\n                userName.requestFocus();\r\n                userName.setSelection(userName.getText().length());\r\n                //showUserInfoDialog();\r\n            }\r\n        });\r\n\r\n        gestureDetector = new GestureDetector(this.getContext(), new GestureDetector.SimpleOnGestureListener() {\r\n            @Override\r\n            public boolean onDoubleTap(MotionEvent e) {\r\n                System.out.println(\"double tab dectedeed 1\");\r\n\r\n                return true;\r\n            }\r\n        });\r\n        view.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                // Code to make EditText non-editable\r\n                userName.setEnabled(false);\r\n                userUniversity.setEnabled(false);\r\n                userPhoneNumb.setEnabled(false);\r\n                userEmail.setEnabled(false);\r\n                userInfo.setEnabled(false);\r\n\r\n                if (userName.getText().toString().trim().length() == 0) {\r\n                    Toast.makeText(getContext(), \"User name can not be empty. Change cancelled\", Toast.LENGTH_LONG).show();\r\n                }\r\n                else {\r\n                    // edit user info here\r\n                    name = userName.getText().toString();\r\n                    phoneNumb = userPhoneNumb.getText().toString();\r\n                    email = userEmail.getText().toString();\r\n                    info = userUniversity.getText().toString();\r\n                    UserFireBaseHolder user = new UserFireBaseHolder(name, phoneNumb, info, \"DEFAULT_PFP\", email);\r\n                    String userID = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                    user.setId(userID);\r\n                    fb.updateUser(user);\r\n                }\r\n                return gestureDetector.onTouchEvent(event);\r\n            }\r\n        });\r\n\r\n\r\n        return view;\r\n    }\r\n\r\n    public void showUserInfoDialog() {\r\n        final Dialog dialog = new Dialog(getActivity());\r\n        dialog.setContentView(R.layout.dialog_user_info);\r\n        dialog.setTitle(\"User Information\");\r\n\r\n        // Find views\r\n        EditText userName = dialog.findViewById(R.id.userName);\r\n        EditText userPhoneNumber = dialog.findViewById(R.id.userPhoneNumber);\r\n        EditText userEmail = dialog.findViewById(R.id.userEmail);\r\n        EditText userUniversity = dialog.findViewById(R.id.userUniversity);\r\n        Button submitButton = dialog.findViewById(R.id.buttonSubmit);\r\n\r\n        submitButton.setOnClickListener(v -> {\r\n\r\n            if (userName.getText().toString().trim().length() == 0) {\r\n                Toast.makeText(getContext(), \"User name can not be empty. Change cancelled\", Toast.LENGTH_LONG).show();\r\n            }\r\n            else {\r\n                // edit user info here\r\n                name = userName.getText().toString();\r\n                phoneNumb = userPhoneNumber.getText().toString();\r\n                email = userEmail.getText().toString();\r\n                info = userUniversity.getText().toString();\r\n                UserFireBaseHolder user = new UserFireBaseHolder(name, phoneNumb, info, \"DEFAULT_PFP\", email);\r\n                String userID = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                user.setId(userID);\r\n                fb.updateUser(user);\r\n            }\r\n\r\n            dialog.dismiss(); // Close the dialog\r\n        });\r\n\r\n        dialog.show();\r\n    }\r\n\r\n    public String randomPick(User user){\r\n        String Name = user.getName().toString();\r\n        char firstLetter = Name.charAt(0);\r\n        if (!(firstLetter >= 'A' && firstLetter <= 'Z') && !(firstLetter >= 'a' && firstLetter <= 'z')) {\r\n            firstLetter = '?';\r\n        }\r\n        Random rand = new Random();\r\n        int rand_int1 = rand.nextInt(4)+1;\r\n        String pictureName = \"\" + firstLetter + rand_int1;\r\n        pictureName = pictureName.toUpperCase()+\".png\";\r\n        return pictureName;\r\n    }\r\n\r\n    public void photoUpdate(String userID, Uri imageUri){\r\n        FireStoreBridge fb_user = new FireStoreBridge(\"USER\");\r\n        fb_user.updatePhoto(userID, imageUri);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quantumscan/ProfileFragment.java b/app/src/main/java/com/example/quantumscan/ProfileFragment.java
--- a/app/src/main/java/com/example/quantumscan/ProfileFragment.java	(revision f3ac767ef56982ed71c4f5a1d6d24496d2b9e324)
+++ b/app/src/main/java/com/example/quantumscan/ProfileFragment.java	(date 1712459334189)
@@ -46,6 +46,9 @@
     EditText userPhoneNumb;
     EditText userEmail;
     EditText userInfo;
+    Button editPhoto;
+    Button deletePhoto;
+
 
     String name;
     String university;
@@ -65,8 +68,12 @@
                     String userId = Settings.Secure.getString(this.getContext().getContentResolver(), Settings.Secure.ANDROID_ID);
                     System.out.println(userId);
                     photoUpdate(userId, imageUri);
+                    editPhoto.setVisibility(View.GONE);
+                    deletePhoto.setVisibility(View.GONE);
                 } else {
                     Toast.makeText(getContext(), "Please select an image", Toast.LENGTH_SHORT).show();
+                    editPhoto.setVisibility(View.GONE);
+                    deletePhoto.setVisibility(View.GONE);
                 }
             });
     String pictureName;
@@ -82,12 +89,43 @@
         userEmail = view.findViewById(R.id.userEmailText);
         userInfo = view.findViewById(R.id.userInfoText);
         imageView = view.findViewById(R.id.profileImage);
+
         FrameLayout profilePictureContainer = view.findViewById(R.id.profilePictureContainer);
+
+        editPhoto = view.findViewById(R.id.editProfilePhoto);
+
+        deletePhoto = view.findViewById(R.id.deleteProfilePhoto);
+
         String userId = Settings.Secure.getString(this.getContext().getContentResolver(), Settings.Secure.ANDROID_ID);
         FireStoreBridge fb1 = new FireStoreBridge("USER");
 
         selectImage = new SelectImage(getActivity(), activityResultLauncher);
-        profilePictureContainer.setOnClickListener(v -> selectImage.pickImage());
+        editPhoto.setOnClickListener(v -> {
+            selectImage.pickImage();
+            editPhoto.setVisibility(View.GONE);
+            deletePhoto.setVisibility(View.GONE);
+        });
+
+        profilePictureContainer.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                editPhoto.setVisibility(View.VISIBLE);
+                deletePhoto.setVisibility(View.VISIBLE);
+            }
+        });
+
+        deletePhoto.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                String deleteToPhoto = userName.getText().toString();
+                pictureName = randomPickForDelete(deleteToPhoto);
+                fb1.deleteProfilePhoto(userId, pictureName);
+                fb1.displayProfile(pictureName, imageView);
+                editPhoto.setVisibility(View.GONE);
+                deletePhoto.setVisibility(View.GONE);
+            }
+        });
+
 
         fb1.retrieveUser(userId, new FireStoreBridge.OnUserRetrievedListener() {
             @Override
@@ -214,8 +252,22 @@
         return pictureName;
     }
 
+    public String randomPickForDelete(String userName){
+        char firstLetter = userName.charAt(0);
+        if (!(firstLetter >= 'A' && firstLetter <= 'Z') && !(firstLetter >= 'a' && firstLetter <= 'z')) {
+            firstLetter = '?';
+        }
+        Random rand = new Random();
+        int rand_int1 = rand.nextInt(4)+1;
+        String pictureName = "" + firstLetter + rand_int1;
+        pictureName = pictureName.toUpperCase()+".png";
+        return pictureName;
+    }
+
+
     public void photoUpdate(String userID, Uri imageUri){
         FireStoreBridge fb_user = new FireStoreBridge("USER");
         fb_user.updatePhoto(userID, imageUri);
+
     }
 }
\ No newline at end of file
