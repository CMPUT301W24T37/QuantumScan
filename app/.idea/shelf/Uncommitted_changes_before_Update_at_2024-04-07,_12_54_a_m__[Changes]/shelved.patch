Index: .idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
+++ /dev/null	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
@@ -1,182 +0,0 @@
-Index: app/src/main/java/com/example/quantumscan/OrganizerEventPage.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerEventPage extends AppCompatActivity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_event_homepage);\n\n        TextView eventNameView = findViewById(R.id.textView_eventName);\n        Button backButton = findViewById(R.id.returnButton);\n        Button infoButton = findViewById(R.id.buttonInfo);\n        Button listButton = findViewById(R.id.buttonViewAttend);\n        Button posterButton = findViewById(R.id.buttonPoster);\n\n        // Retrieve the city name passed from MainActivity\n        String eventID = getIntent().getStringExtra(\"eventID\");\n        String eventName = getIntent().getStringExtra(\"eventName\");\n        eventNameView.setText(eventName);\n\n        /*\n        Event eventOBJ = DataHolder.getInstance().getEvent(eventID);\n        System.out.println(\"Title:\"+ eventOBJ.getTitle());\n\n         */\n\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Go back to MainActivity\n                finish();\n            }\n        });\n\n        infoButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerEventInfo.class);\n                detailIntent.putExtra(\"eventID\", eventID);\n                detailIntent.putExtra(\"eventName\", eventName);\n                startActivity(detailIntent);\n            }\n        });\n\n        listButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerViewAttendees.class);\n                detailIntent.putExtra(\"eventID\", eventID);\n                detailIntent.putExtra(\"eventName\", eventName);\n                startActivity(detailIntent);\n            }\n        });\n\n        posterButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);\n                startActivity(intent);\n            }\n        });\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java b/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java	(date 1711865550160)
-@@ -62,8 +62,10 @@
-         posterButton.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
--                Intent intent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);
--                startActivity(intent);
-+                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);
-+                detailIntent.putExtra("eventID", eventID);
-+                detailIntent.putExtra("eventName", eventName);
-+                startActivity(detailIntent);
-             }
-         });
-     }
-Index: app/src/main/java/com/example/quantumscan/FireStoreBridge.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.util.Log;\nimport android.widget.ImageView;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.FieldPath;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageReference;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{\n    private FirebaseFirestore db;\n    private CollectionReference collectionName;\n    private Query query;\n    private FirebaseStorage storage;\n\n    public FireStoreBridge(String collectionName){\n        this.db = FirebaseFirestore.getInstance();\n        this.collectionName = this.db.collection(collectionName);\n        this.query = this.collectionName;\n        this.storage = FirebaseStorage.getInstance();\n    }\n    public FirebaseFirestore getDb() {\n        return db;\n    }\n\n    public CollectionReference getCollectionName() {\n        return collectionName;\n    }\n\n    public interface OnUserRetrievedListener {\n        void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles);\n    }\n\n    public interface OnEventRetrievedListener {\n        void onEventRetrieved(ArrayList<Event> event, ArrayList<String> organizerList);\n\n    }\n\n    private interface OnEventRetrievedListenerHelper{\n        void onAttendeeRetrieved(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    private interface OnCheckedInListener{\n        void onCheckedInListener(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param userID the height of the rectangle, must be non-negative\n     */\n    public void retrieveUser(String userID, OnUserRetrievedListener listener) {\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), userID);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    User user = new User(null,null,null, null,null);\n                    ArrayList<String> attendeeRoles = new ArrayList<String>();\n                    ArrayList<String> organizerRoles = new ArrayList<String>();\n                    for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                        // Retrieve user data from document and set properties of the User object\n                        user.setName(documentSnapshot.getString(\"name\"));\n                        user.setProfilePicture(documentSnapshot.getString(\"profilePicture\"));\n                        user.setPhone(documentSnapshot.getString(\"phone\"));\n                        user.setUniversity(documentSnapshot.getString(\"university\"));\n                        user.setEmail(documentSnapshot.getString(\"email\"));\n                        user.setId(documentSnapshot.getString(\"id\"));\n                        List<String> list1 = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n                        List<String> list2 = (List<String>) documentSnapshot.get(\"organizerRoles\");\n                        attendeeRoles = (ArrayList<String>) list1;\n                        organizerRoles = (ArrayList<String>) list2;\n\n                    }\n\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onUserRetrieved(user, attendeeRoles, organizerRoles);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n                    listener.onUserRetrieved(null,null,null);\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param eventId the height of the rectangle, must be non-negative\n     */\n\n    public void retrieveEvent(String eventId, OnEventRetrievedListener listener){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * */\n    public void retrieveAllEvent(OnEventRetrievedListener listener) {\n        this.query = this.collectionName;\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                       organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param attendeeListRef a interface that contain retrieved data which is stored in a firebase holder\n     * @param organizer a interface that contain retrieved data which is stored in a firebase holder\n     *\n     * */\n    private void retrieveAllEventHelper(CollectionReference attendeeListRef, OrganizerFireBaseHolder organizer){\n        // TODO: This is for check in status retrieve\n        /*\n        retrieve attendeelist in each event documentation\n         */\n        attendeeListRef.document().collection(\"attendeeList\").get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            ArrayList<AttendeeFireBaseHolder> attendeeFireBaseHolders = new ArrayList<>();\n\n                            for (QueryDocumentSnapshot documentSnapshot1 : task.getResult()) {\n                                AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                                attendee.setAttendeeId(documentSnapshot1.getString(\"id\"));\n                                attendee.setCheckInStatus(documentSnapshot1.getBoolean(\"checkedIn\"));\n                                attendeeFireBaseHolders.add(attendee);\n                            }\n\n                        }else {\n                            // Handle the case where the task failed\n                            Exception e = task.getException();\n                            System.out.println(\"Query failed: \" + e.getMessage());\n                            // Notify the listener with a null user object\n\n                        }\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param user a interface that contain retrieved data which is stored in a firebase holder*\n     * */\n    public void updateUser(UserFireBaseHolder user){\n        String userID = user.getId();\n\n        this.collectionName.document(userID)\n                .set(user).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEvent(Event eventInfo, String organizerID){\n        // get event id\n        String eventId= eventInfo.getId();\n        System.out.println(eventId);\n\n        // create an attendeeList that will be added to organizer <both are firebase holder>\n        ArrayList<AttendeeListFireBaseHolder> attendeeList = new ArrayList<>();\n        for (int i = 0; i < eventInfo.getAttendees().size(); i++){\n            AttendeeListFireBaseHolder attendee = new AttendeeListFireBaseHolder(\n                    eventInfo.getAttendees().get(i).getUserID(),\n                    eventInfo.getAttendees().get(i).getCheckIn(),\n                    eventInfo.getAttendees().get(i).getUserName(),\n                    eventInfo.getAttendees().get(i).getCheckInCount());\n            attendeeList.add(attendee);\n        }//eventInfo.getOrganizer().getUser().getId() eventInfo.getOrganizer().getUser().getId()\n        EventFireBaseHolder event = new EventFireBaseHolder(\n                eventInfo.getAnnouncement(),\n                eventInfo.getDescription(),\n                eventInfo.getEventCode(),\n                eventId,\n                organizerID,\n                eventInfo.getPosterCode(),\n                eventInfo.getTitle());\n        this.updateEventHelper(eventId, organizerID);\n        this.collectionName.document(eventId).set(event)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n        \n\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    private void updateEventHelper(String eventID, String organizerID){\n        CollectionReference userCollection = this.getDb().collection(\"USER\");\n        userCollection.document(organizerID).update(\"organizerRoles\", FieldValue.arrayUnion(eventID))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });;\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEventDescription(String eventId, String description){\n\n        this.collectionName.document(eventId).update(\"description\", description)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    @Override\n    public void updateEventImage(String eventId, String imageURL){\n        this.collectionName.document(eventId).update(\"posterCode\", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n    @Override\n    public void uploadEventImage(Event newEvent, String evenID, Uri imageUri) {\n        StorageReference imageRef = storage.getReference().child(newEvent.getId() + \".jpg\");\n        imageRef.putFile(imageUri);\n    }\n\n    public void displayImage(String EventID, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(EventID+\".jpg\");\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeCheckIn(String userId, String eventId){\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkedIn\", true)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkInCount\", FieldValue.increment(1))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n    }\n\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void retrieveAttendeeCheckIn(String eventId, OnCheckedInListener listener){\n        this.query = this.collectionName.document(eventId).collection(\"attendeeList\");\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                ArrayList<AttendeeFireBaseHolder> attendeeList = new ArrayList<>();\n                if (task.isSuccessful()) {\n                    for (QueryDocumentSnapshot document : task.getResult()) {\n                        AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                        attendee.setCheckInCount(document.getLong(\"checkInCount\"));\n                        attendee.setName(document.getString(\"name\"));\n                        attendee.setAttendeeId(document.getId());\n                        attendee.setCheckInStatus(document.getBoolean(\"checkedIn\"));\n                        attendeeList.add(attendee);\n                    }\n                } else {\n\n                }\n                listener.onCheckedInListener(attendeeList);\n            }\n\n        });\n\n\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeSignUp(String userId, String eventId){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            boolean signUpResult = false;\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                    long attendeeLimit = documentSnapshot.getLong(\"attendeeLimit\");\n                    long currentTotalAttendee = documentSnapshot.getLong(\"currentTotalAttendee\");\n                    if (currentTotalAttendee < attendeeLimit){\n                        signUpResult = true;\n\n                    }else{\n\n                    }\n                }\n\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeSignUpHelper(String userId, String eventId){}\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java
---- a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(date 1711865550160)
-@@ -410,6 +410,14 @@
-         imageRef.putFile(imageUri);
-     }
- 
-+    public void updateImage(String EventID, ImageView imageView, Uri imageUri){
-+        StorageReference desertRef = storage.getReference().child(EventID+"jpg");
-+        desertRef.delete();
-+        StorageReference imageRef = storage.getReference().child(EventID + ".jpg");
-+        imageRef.putFile(imageUri);
-+        //displayImage(EventID, imageView);
-+
-+    }
-     public void displayImage(String EventID, ImageView imageView){
-         StorageReference islandRef = this.storage.getReference().child(EventID+".jpg");
- 
-Index: app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\n\npublic class OrganizerUpdatePoster extends AppCompatActivity {\n    private static final int PICK_IMAGE_REQUEST = 1;\n    private static final int PERMISSION_REQUEST_STORAGE = 2;\n\n    private ImageView imageView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_event_update_poster);\n\n        imageView = findViewById(R.id.image_view);\n        Button btnSelectImage = findViewById(R.id.button_choose_image);\n        Button backButton = findViewById(R.id.returnButton);\n\n        btnSelectImage.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (ContextCompat.checkSelfPermission(OrganizerUpdatePoster.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                    ActivityCompat.requestPermissions(OrganizerUpdatePoster.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_STORAGE);\n                } else {\n                    openGallery();\n                }\n            }\n        });\n\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                finish();\n            }\n        });\n    }\n\n    private void openGallery() {\n        Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n        startActivityForResult(intent, PICK_IMAGE_REQUEST);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == PERMISSION_REQUEST_STORAGE) {\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                openGallery();\n            }\n        }\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {\n            Uri imageUri = data.getData();\n            imageView.setImageURI(imageUri);\n        }\n    }\n}\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java b/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java	(date 1711865550161)
-@@ -1,6 +1,7 @@
- package com.example.quantumscan;
- 
- import android.Manifest;
-+import android.app.Activity;
- import android.content.Intent;
- import android.content.pm.PackageManager;
- import android.net.Uri;
-@@ -8,6 +9,10 @@
- import android.view.View;
- import android.widget.Button;
- import android.widget.ImageView;
-+import android.widget.Toast;
-+
-+import androidx.activity.result.ActivityResultLauncher;
-+import androidx.activity.result.contract.ActivityResultContracts;
- import androidx.annotation.NonNull;
- import androidx.appcompat.app.AppCompatActivity;
- import androidx.core.app.ActivityCompat;
-@@ -18,7 +23,21 @@
-     private static final int PERMISSION_REQUEST_STORAGE = 2;
- 
-     private ImageView imageView;
-+    private SelectImage selectImage;
- 
-+    private String eventID;
-+    private String eventName;
-+    private Uri imageUri = null;
-+    private final ActivityResultLauncher<Intent> activityResultLauncher =
-+            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
-+                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
-+                    imageUri = result.getData().getData();
-+                    this.imageUpdate(eventID, imageView, imageUri);
-+
-+                } else {
-+                    Toast.makeText(OrganizerUpdatePoster.this, "Please select an image", Toast.LENGTH_SHORT).show();
-+                }
-+            });
-     @Override
-     protected void onCreate(Bundle savedInstanceState) {
-         super.onCreate(savedInstanceState);
-@@ -28,6 +47,16 @@
-         Button btnSelectImage = findViewById(R.id.button_choose_image);
-         Button backButton = findViewById(R.id.returnButton);
- 
-+        eventID = getIntent().getStringExtra("eventID");
-+        eventName = getIntent().getStringExtra("eventName");
-+        //System.out.println("EventID"+eventID);
-+        //System.out.println("EventName"+eventName);
-+        //this.imageDisplay(eventID, imageView);
-+        selectImage = new SelectImage(this, activityResultLauncher);
-+        btnSelectImage.setOnClickListener(v -> selectImage.pickImage());
-+
-+        //this.imageDisplay(eventID, imageView);
-+        /*
-         btnSelectImage.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-@@ -38,7 +67,7 @@
-                 }
-             }
-         });
--
-+        */
-         backButton.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-@@ -47,6 +76,15 @@
-         });
-     }
- 
-+    public void imageDisplay(String EventID, ImageView imageView){
-+        FireStoreBridge fb_events = new FireStoreBridge("EVENT");
-+        fb_events.displayImage(EventID, imageView);
-+    }
-+    public void imageUpdate(String EventID, ImageView imageView, Uri imageUri){
-+        FireStoreBridge fb_events = new FireStoreBridge("EVENT");
-+        fb_events.updateImage(EventID, imageView, imageUri);
-+    }
-+    /*
-     private void openGallery() {
-         Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-         startActivityForResult(intent, PICK_IMAGE_REQUEST);
-@@ -70,5 +108,8 @@
-             imageView.setImageURI(imageUri);
-         }
-     }
-+
-+     */
-+
- }
- 
-Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.google.firebase.storage.StorageReference;\nimport com.google.firebase.storage.FirebaseStorage;\n\nimport com.google.firebase.storage.UploadTask;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n    private String userID = \"1658f5315ca1a74d\";\n    private FireStoreBridge fb  = new FireStoreBridge(\"EVENT\");\n    // FirebaseStorage storage = FirebaseStorage.getInstance();\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n        void uploadEventImage(Event newEvent ,String evenID, Uri imageURI);\n    }\n\n    // REFERENCE CODE LINK: https://github.com/Everyday-Programmer/Upload-Image-to-Firebase-Android/blob/main/app/src/main/java/com/example/uploadimagefirebase/MainActivity.java\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n\n                        //imageUrlUploadListener listener = null;\n                        //listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n                System.out.println(\"imageUri after pick \" + imageUri);\n\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                Event newEvent = new Event();\n                newEvent.EventIdGenerator(userID);\n                newEvent.setDescription(infoText);\n                newEvent.setTitle(nameText);\n\n                String EventID = newEvent.getId();\n\n                fb.uploadEventImage(newEvent, EventID, imageUri);\n\n\n\n                fb.updateEvent(newEvent,userID);\n\n                Intent returnIntent = new Intent();\n                returnIntent.putExtra(\"eventID\", newEvent.getId());\n                returnIntent.putExtra(\"eventName\", newEvent.getTitle());\n                setResult(Activity.RESULT_OK, returnIntent);\n                finish();\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(date 1711865550160)
-@@ -40,10 +40,7 @@
-                 if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
-                     imageUri = result.getData().getData();
-                     System.out.println(imageUri);
--                    // Handle the imageUri, e.g., display it or prepare it for upload
- 
--                        //imageUrlUploadListener listener = null;
--                        //listener.updateEventImage("asdf", imageUri.toString());
-                 } else {
-                     Toast.makeText(OrganizerCreateEvent.this, "Please select an image", Toast.LENGTH_SHORT).show();
-                 }
-@@ -68,10 +65,6 @@
-         selectImage = new SelectImage(this, activityResultLauncher);
-         buttonPickImage.setOnClickListener(v -> selectImage.pickImage());
- 
--
--
--
--
-         buttonReturn.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
+++ /dev/null	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
@@ -1,1323 +0,0 @@
-Index: app/src/main/java/com/example/quantumscan/FireStoreBridge.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.util.Log;\nimport android.widget.ImageView;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.FieldPath;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageReference;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{\n    private FirebaseFirestore db;\n    private CollectionReference collectionName;\n    private Query query;\n    private FirebaseStorage storage;\n\n    public FireStoreBridge(String collectionName){\n        this.db = FirebaseFirestore.getInstance();\n        this.collectionName = this.db.collection(collectionName);\n        this.query = this.collectionName;\n        this.storage = FirebaseStorage.getInstance();\n    }\n    public FirebaseFirestore getDb() {\n        return db;\n    }\n\n    public CollectionReference getCollectionName() {\n        return collectionName;\n    }\n\n    public interface OnUserRetrievedListener {\n        void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles);\n    }\n\n    public interface OnEventRetrievedListener {\n        void onEventRetrieved(ArrayList<Event> event, ArrayList<String> organizerList);\n\n    }\n\n    private interface OnEventRetrievedListenerHelper{\n        void onAttendeeRetrieved(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    private interface OnCheckedInListener{\n        void onCheckedInListener(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param userID the height of the rectangle, must be non-negative\n     */\n    public void retrieveUser(String userID, OnUserRetrievedListener listener) {\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), userID);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    User user = new User(null,null,null, null,null);\n                    ArrayList<String> attendeeRoles = new ArrayList<String>();\n                    ArrayList<String> organizerRoles = new ArrayList<String>();\n                    for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                        // Retrieve user data from document and set properties of the User object\n                        user.setName(documentSnapshot.getString(\"name\"));\n                        user.setProfilePicture(documentSnapshot.getString(\"profilePicture\"));\n                        user.setPhone(documentSnapshot.getString(\"phone\"));\n                        user.setUniversity(documentSnapshot.getString(\"university\"));\n                        user.setEmail(documentSnapshot.getString(\"email\"));\n                        user.setId(documentSnapshot.getString(\"id\"));\n                        List<String> list1 = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n                        List<String> list2 = (List<String>) documentSnapshot.get(\"organizerRoles\");\n                        attendeeRoles = (ArrayList<String>) list1;\n                        organizerRoles = (ArrayList<String>) list2;\n\n                    }\n\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onUserRetrieved(user, attendeeRoles, organizerRoles);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n                    listener.onUserRetrieved(null,null,null);\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param eventId the height of the rectangle, must be non-negative\n     */\n\n    public void retrieveEvent(String eventId, OnEventRetrievedListener listener){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * */\n    public void retrieveAllEvent(OnEventRetrievedListener listener) {\n        this.query = this.collectionName;\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                       organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param attendeeListRef a interface that contain retrieved data which is stored in a firebase holder\n     * @param organizer a interface that contain retrieved data which is stored in a firebase holder\n     *\n     * */\n    private void retrieveAllEventHelper(CollectionReference attendeeListRef, OrganizerFireBaseHolder organizer){\n        // TODO: This is for check in status retrieve\n        /*\n        retrieve attendeelist in each event documentation\n         */\n        attendeeListRef.document().collection(\"attendeeList\").get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            ArrayList<AttendeeFireBaseHolder> attendeeFireBaseHolders = new ArrayList<>();\n\n                            for (QueryDocumentSnapshot documentSnapshot1 : task.getResult()) {\n                                AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                                attendee.setAttendeeId(documentSnapshot1.getString(\"id\"));\n                                attendee.setCheckInStatus(documentSnapshot1.getBoolean(\"checkedIn\"));\n                                attendeeFireBaseHolders.add(attendee);\n                            }\n\n                        }else {\n                            // Handle the case where the task failed\n                            Exception e = task.getException();\n                            System.out.println(\"Query failed: \" + e.getMessage());\n                            // Notify the listener with a null user object\n\n                        }\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param user a interface that contain retrieved data which is stored in a firebase holder*\n     * */\n    public void updateUser(UserFireBaseHolder user){\n        String userID = user.getId();\n\n        this.collectionName.document(userID)\n                .set(user).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEvent(Event eventInfo, String organizerID){\n        // get event id\n        String eventId= eventInfo.getId();\n        System.out.println(eventId);\n\n        // create an attendeeList that will be added to organizer <both are firebase holder>\n        ArrayList<AttendeeListFireBaseHolder> attendeeList = new ArrayList<>();\n        for (int i = 0; i < eventInfo.getAttendees().size(); i++){\n            AttendeeListFireBaseHolder attendee = new AttendeeListFireBaseHolder(\n                    eventInfo.getAttendees().get(i).getUserID(),\n                    eventInfo.getAttendees().get(i).getCheckIn(),\n                    eventInfo.getAttendees().get(i).getUserName(),\n                    eventInfo.getAttendees().get(i).getCheckInCount());\n            attendeeList.add(attendee);\n        }//eventInfo.getOrganizer().getUser().getId() eventInfo.getOrganizer().getUser().getId()\n        EventFireBaseHolder event = new EventFireBaseHolder(\n                eventInfo.getAnnouncement(),\n                eventInfo.getDescription(),\n                eventInfo.getEventCode(),\n                eventId,\n                organizerID,\n                eventInfo.getPosterCode(),\n                eventInfo.getTitle());\n        this.updateEventHelper(eventId, organizerID);\n        this.collectionName.document(eventId).set(event)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n        \n\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    private void updateEventHelper(String eventID, String organizerID){\n        CollectionReference userCollection = this.getDb().collection(\"USER\");\n        userCollection.document(organizerID).update(\"organizerRoles\", FieldValue.arrayUnion(eventID))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });;\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEventDescription(String eventId, String description){\n\n        this.collectionName.document(eventId).update(\"description\", description)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    @Override\n    public void updateEventImage(String eventId, String imageURL){\n        this.collectionName.document(eventId).update(\"posterCode\", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n    @Override\n    public void uploadEventImage(Event newEvent, String evenID, Uri imageUri) {\n        StorageReference imageRef = storage.getReference().child(newEvent.getId() + \".jpg\");\n        imageRef.putFile(imageUri);\n    }\n\n    public void displayImage(String EventID, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(EventID+\".jpg\");\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeCheckIn(String userId, String eventId){\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkedIn\", true)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkInCount\", FieldValue.increment(1))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n    }\n\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void retrieveAttendeeCheckIn(String eventId, OnCheckedInListener listener){\n        this.query = this.collectionName.document(eventId).collection(\"attendeeList\");\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                ArrayList<AttendeeFireBaseHolder> attendeeList = new ArrayList<>();\n                if (task.isSuccessful()) {\n                    for (QueryDocumentSnapshot document : task.getResult()) {\n                        AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                        attendee.setCheckInCount(document.getLong(\"checkInCount\"));\n                        attendee.setName(document.getString(\"name\"));\n                        attendee.setAttendeeId(document.getId());\n                        attendee.setCheckInStatus(document.getBoolean(\"checkedIn\"));\n                        attendeeList.add(attendee);\n                    }\n                } else {\n\n                }\n                listener.onCheckedInListener(attendeeList);\n            }\n\n        });\n\n\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeSignUp(String userId, String eventId){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            boolean signUpResult = false;\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                    long attendeeLimit = documentSnapshot.getLong(\"attendeeLimit\");\n                    long currentTotalAttendee = documentSnapshot.getLong(\"currentTotalAttendee\");\n                    if (currentTotalAttendee < attendeeLimit){\n                        signUpResult = true;\n\n                    }else{\n\n                    }\n                }\n\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeSignUpHelper(String userId, String eventId){}\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java
---- a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(date 1711517589851)
-@@ -410,6 +410,14 @@
-         imageRef.putFile(imageUri);
-     }
- 
-+    public void updateImage(String EventID, ImageView imageView, Uri imageUri){
-+        StorageReference desertRef = storage.getReference().child(EventID+"jpg");
-+        desertRef.delete();
-+        StorageReference imageRef = storage.getReference().child(EventID + ".jpg");
-+        imageRef.putFile(imageUri);
-+        //displayImage(EventID, imageView);
-+
-+    }
-     public void displayImage(String EventID, ImageView imageView){
-         StorageReference islandRef = this.storage.getReference().child(EventID+".jpg");
- 
-Index: app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\n\npublic class OrganizerUpdatePoster extends AppCompatActivity {\n    private static final int PICK_IMAGE_REQUEST = 1;\n    private static final int PERMISSION_REQUEST_STORAGE = 2;\n\n    private ImageView imageView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_event_update_poster);\n\n        imageView = findViewById(R.id.image_view);\n        Button btnSelectImage = findViewById(R.id.button_choose_image);\n        Button backButton = findViewById(R.id.returnButton);\n\n        btnSelectImage.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (ContextCompat.checkSelfPermission(OrganizerUpdatePoster.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                    ActivityCompat.requestPermissions(OrganizerUpdatePoster.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_STORAGE);\n                } else {\n                    openGallery();\n                }\n            }\n        });\n\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                finish();\n            }\n        });\n    }\n\n    private void openGallery() {\n        Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n        startActivityForResult(intent, PICK_IMAGE_REQUEST);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == PERMISSION_REQUEST_STORAGE) {\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                openGallery();\n            }\n        }\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {\n            Uri imageUri = data.getData();\n            imageView.setImageURI(imageUri);\n        }\n    }\n}\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java b/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java	(date 1711007141584)
-@@ -1,6 +1,7 @@
- package com.example.quantumscan;
- 
- import android.Manifest;
-+import android.app.Activity;
- import android.content.Intent;
- import android.content.pm.PackageManager;
- import android.net.Uri;
-@@ -8,6 +9,10 @@
- import android.view.View;
- import android.widget.Button;
- import android.widget.ImageView;
-+import android.widget.Toast;
-+
-+import androidx.activity.result.ActivityResultLauncher;
-+import androidx.activity.result.contract.ActivityResultContracts;
- import androidx.annotation.NonNull;
- import androidx.appcompat.app.AppCompatActivity;
- import androidx.core.app.ActivityCompat;
-@@ -18,7 +23,21 @@
-     private static final int PERMISSION_REQUEST_STORAGE = 2;
- 
-     private ImageView imageView;
-+    private SelectImage selectImage;
- 
-+    private String eventID;
-+    private String eventName;
-+    private Uri imageUri = null;
-+    private final ActivityResultLauncher<Intent> activityResultLauncher =
-+            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
-+                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
-+                    imageUri = result.getData().getData();
-+                    this.imageUpdate(eventID, imageView, imageUri);
-+
-+                } else {
-+                    Toast.makeText(OrganizerUpdatePoster.this, "Please select an image", Toast.LENGTH_SHORT).show();
-+                }
-+            });
-     @Override
-     protected void onCreate(Bundle savedInstanceState) {
-         super.onCreate(savedInstanceState);
-@@ -28,6 +47,16 @@
-         Button btnSelectImage = findViewById(R.id.button_choose_image);
-         Button backButton = findViewById(R.id.returnButton);
- 
-+        eventID = getIntent().getStringExtra("eventID");
-+        eventName = getIntent().getStringExtra("eventName");
-+        //System.out.println("EventID"+eventID);
-+        //System.out.println("EventName"+eventName);
-+        //this.imageDisplay(eventID, imageView);
-+        selectImage = new SelectImage(this, activityResultLauncher);
-+        btnSelectImage.setOnClickListener(v -> selectImage.pickImage());
-+
-+        //this.imageDisplay(eventID, imageView);
-+        /*
-         btnSelectImage.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-@@ -38,7 +67,7 @@
-                 }
-             }
-         });
--
-+        */
-         backButton.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-@@ -47,6 +76,15 @@
-         });
-     }
- 
-+    public void imageDisplay(String EventID, ImageView imageView){
-+        FireStoreBridge fb_events = new FireStoreBridge("EVENT");
-+        fb_events.displayImage(EventID, imageView);
-+    }
-+    public void imageUpdate(String EventID, ImageView imageView, Uri imageUri){
-+        FireStoreBridge fb_events = new FireStoreBridge("EVENT");
-+        fb_events.updateImage(EventID, imageView, imageUri);
-+    }
-+    /*
-     private void openGallery() {
-         Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-         startActivityForResult(intent, PICK_IMAGE_REQUEST);
-@@ -70,5 +108,8 @@
-             imageView.setImageURI(imageUri);
-         }
-     }
-+
-+     */
-+
- }
- 
-Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.google.firebase.storage.StorageReference;\nimport com.google.firebase.storage.FirebaseStorage;\n\nimport com.google.firebase.storage.UploadTask;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n    private String userID = \"1658f5315ca1a74d\";\n    private FireStoreBridge fb  = new FireStoreBridge(\"EVENT\");\n    // FirebaseStorage storage = FirebaseStorage.getInstance();\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n        void uploadEventImage(Event newEvent ,String evenID, Uri imageURI);\n    }\n\n    // REFERENCE CODE LINK: https://github.com/Everyday-Programmer/Upload-Image-to-Firebase-Android/blob/main/app/src/main/java/com/example/uploadimagefirebase/MainActivity.java\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n\n                        //imageUrlUploadListener listener = null;\n                        //listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n                System.out.println(\"imageUri after pick \" + imageUri);\n\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                Event newEvent = new Event();\n                newEvent.EventIdGenerator(userID);\n                newEvent.setDescription(infoText);\n                newEvent.setTitle(nameText);\n\n                String EventID = newEvent.getId();\n\n                fb.uploadEventImage(newEvent, EventID, imageUri);\n\n\n\n                fb.updateEvent(newEvent,userID);\n\n                Intent returnIntent = new Intent();\n                returnIntent.putExtra(\"eventID\", newEvent.getId());\n                returnIntent.putExtra(\"eventName\", newEvent.getTitle());\n                setResult(Activity.RESULT_OK, returnIntent);\n                finish();\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(date 1711582102824)
-@@ -40,10 +40,7 @@
-                 if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
-                     imageUri = result.getData().getData();
-                     System.out.println(imageUri);
--                    // Handle the imageUri, e.g., display it or prepare it for upload
- 
--                        //imageUrlUploadListener listener = null;
--                        //listener.updateEventImage("asdf", imageUri.toString());
-                 } else {
-                     Toast.makeText(OrganizerCreateEvent.this, "Please select an image", Toast.LENGTH_SHORT).show();
-                 }
-@@ -68,10 +65,6 @@
-         selectImage = new SelectImage(this, activityResultLauncher);
-         buttonPickImage.setOnClickListener(v -> selectImage.pickImage());
- 
--
--
--
--
-         buttonReturn.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ /dev/null	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-@@ -1,374 +0,0 @@
--Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n    private String userID = \"1658f5315ca1a74d\";\n    private FireStoreBridge fb  = new FireStoreBridge(\"EVENT\");;\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n    }\n\n    // REFERENCE CODE LINK: https://github.com/Everyday-Programmer/Upload-Image-to-Firebase-Android/blob/main/app/src/main/java/com/example/uploadimagefirebase/MainActivity.java\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n\n                        imageUrlUploadListener listener = null;\n                        listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n        //System.out.println(imageUri);\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                Event newEvent = new Event();\n                newEvent.EventIdGenerator(userID);\n                newEvent.setDescription(infoText);\n                newEvent.setTitle(nameText);\n                fb.updateEvent(newEvent,userID);\n\n                Intent returnIntent = new Intent();\n                returnIntent.putExtra(\"eventID\", newEvent.getId());\n                returnIntent.putExtra(\"eventName\", newEvent.getTitle());\n                setResult(Activity.RESULT_OK, returnIntent);\n                finish();\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
----- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(date 1710880110153)
--@@ -60,7 +60,7 @@
-- 
--         selectImage = new SelectImage(this, activityResultLauncher);
--         buttonPickImage.setOnClickListener(v -> selectImage.pickImage());
---        //System.out.println(imageUri);
--+        System.out.println("imageUri after pick" + imageUri);
-- 
-- 
-- 
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	
---+++ b/.idea/deploymentTargetDropDown.xml	
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,72 +0,0 @@
---Index: app/src/main/java/com/example/quantumscan/QRCodeGenerator.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.util.Base64;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.QRCodeWriter;\n\nimport java.io.ByteArrayOutputStream;\n\n// get Bitmap, this Bitmap can be used in imageView.setImageBitmap(bitmap); to display\n// Bitmap qrCodeBitmap = QRCodeHelper.generateQRCodeBitmap(\"sample text\", 250, 250);\n// imageView.setImageBitmap(bitmap)\npublic class QRCodeGenerator {\n    public static Bitmap generateQRCodeBitmap(String text, int width, int height){\n        QRCodeWriter writer = new QRCodeWriter();\n        BitMatrix bitMatrix = null;\n        try {\n            bitMatrix = writer.encode(text, BarcodeFormat.QR_CODE, width, height);\n        } catch (WriterException e) {\n            throw new RuntimeException(e);\n        }\n        Bitmap bitmap = Bitmap.createBitmap(250, 250, Bitmap.Config.RGB_565);\n        for (int x = 0; x < bitMatrix.getWidth(); x++) {\n            for (int y = 0; y < bitMatrix.getHeight(); y++) {\n                bitmap.setPixel(x, y, bitMatrix.get(x, y) ? android.graphics.Color.BLACK : android.graphics.Color.WHITE);\n            }\n        }\n        return bitmap;\n    }\n\n    // transfer bitmap to base64 format, this format can be stored in firestore\n    // String base64Image = QRCodeHelper.bitmapToBase64(qrCodeBitmap);\n    public static String bitmapToBase64(Bitmap bitmap){\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);\n        byte[] byteArray = byteArrayOutputStream.toByteArray();\n        String base64Image = Base64.encodeToString(byteArray, Base64.DEFAULT);\n        return base64Image;\n    }\n\n    // after take base64 string from firestore, this function transfer base64 to bitmap format, then can be displayed.\n    // Bitmap decodedBitmap = QRCodeHelper.base64ToBitmap(base64Image);\n    // imageView.setImageBitmap(bitmap)\n    public static Bitmap base64ToBitmap(String base64Str){\n        byte[] decodedBytes = Base64.decode(base64Str, Base64.DEFAULT);\n        Bitmap bitmap2 = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);\n        return bitmap2;\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java b/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java
------ a/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java	(date 1709889719046)
---@@ -14,6 +14,8 @@
--- // get Bitmap, this Bitmap can be used in imageView.setImageBitmap(bitmap); to display
--- // Bitmap qrCodeBitmap = QRCodeHelper.generateQRCodeBitmap("sample text", 250, 250);
--- // imageView.setImageBitmap(bitmap)
---+
---+// REFERENCE CODE LINK: https://stackoverflow.com/questions/8800919/how-to-generate-a-qr-code-for-an-android-application
--- public class QRCodeGenerator {
---     public static Bitmap generateQRCodeBitmap(String text, int width, int height){
---         QRCodeWriter writer = new QRCodeWriter();
---@@ -34,6 +36,7 @@
--- 
---     // transfer bitmap to base64 format, this format can be stored in firestore
---     // String base64Image = QRCodeHelper.bitmapToBase64(qrCodeBitmap);
---+    // REFERENCE CODE LINK: https://stackoverflow.com/questions/9224056/android-bitmap-to-base64-string
---     public static String bitmapToBase64(Bitmap bitmap){
---         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
---         bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
---@@ -45,6 +48,7 @@
---     // after take base64 string from firestore, this function transfer base64 to bitmap format, then can be displayed.
---     // Bitmap decodedBitmap = QRCodeHelper.base64ToBitmap(base64Image);
---     // imageView.setImageBitmap(bitmap)
---+    // REFERENCE CODE LINK: https://stackoverflow.com/questions/4837110/how-to-convert-a-base64-string-into-a-bitmap-image-to-show-it-in-a-imageview
---     public static Bitmap base64ToBitmap(String base64Str){
---         byte[] decodedBytes = Base64.decode(base64Str, Base64.DEFAULT);
---         Bitmap bitmap2 = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);
---Index: app/src/main/java/com/example/quantumscan/SelectImage.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultCallback;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\n\npublic class SelectImage {\n    private final Activity activity;\n    private final ActivityResultLauncher<Intent> activityResultLauncher;\n\n    public SelectImage(Activity activity, ActivityResultLauncher<Intent> activityResultLauncher) {\n        this.activity = activity;\n        this.activityResultLauncher = activityResultLauncher;\n    }\n\n    public void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        activityResultLauncher.launch(intent);\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/SelectImage.java b/app/src/main/java/com/example/quantumscan/SelectImage.java
------ a/app/src/main/java/com/example/quantumscan/SelectImage.java	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/src/main/java/com/example/quantumscan/SelectImage.java	(date 1709875657436)
---@@ -20,6 +20,7 @@
---     }
--- 
---     public void pickImage() {
---+
---         Intent intent = new Intent(Intent.ACTION_PICK);
---         intent.setType("image/*");
---         activityResultLauncher.launch(intent);
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709875818948)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,43 +0,0 @@
---Index: app/src/main/java/com/example/quantumscan/SelectImage.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultCallback;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\n\npublic class SelectImage {\n    private final Activity activity;\n    private final ActivityResultLauncher<Intent> activityResultLauncher;\n\n    public SelectImage(Activity activity, ActivityResultLauncher<Intent> activityResultLauncher) {\n        this.activity = activity;\n        this.activityResultLauncher = activityResultLauncher;\n    }\n\n    public void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        activityResultLauncher.launch(intent);\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/SelectImage.java b/app/src/main/java/com/example/quantumscan/SelectImage.java
------ a/app/src/main/java/com/example/quantumscan/SelectImage.java	(revision 23065c595ff8eed454e439e016abc7ff5a285731)
---+++ b/app/src/main/java/com/example/quantumscan/SelectImage.java	(date 1709863215500)
---@@ -20,6 +20,7 @@
---     }
--- 
---     public void pickImage() {
---+
---         Intent intent = new Intent(Intent.ACTION_PICK);
---         intent.setType("image/*");
---         activityResultLauncher.launch(intent);
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"app\">\n        <State>\n          <targetSelectedWithDropDown>\n            <Target>\n              <type value=\"QUICK_BOOT_TARGET\" />\n              <deviceKey>\n                <Key>\n                  <type value=\"VIRTUAL_DEVICE_PATH\" />\n                  <value value=\"$USER_HOME$/.android/avd/Pixel_3a_API_34_extension_level_7_arm64-v8a.avd\" />\n                </Key>\n              </deviceKey>\n            </Target>\n          </targetSelectedWithDropDown>\n          <timeTargetWasSelectedWithDropDown value=\"2024-03-07T06:20:12.158644Z\" />\n        </State>\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 23065c595ff8eed454e439e016abc7ff5a285731)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709861853209)
---@@ -10,12 +10,12 @@
---               <deviceKey>
---                 <Key>
---                   <type value="VIRTUAL_DEVICE_PATH" />
----                  <value value="$USER_HOME$/.android/avd/Pixel_3a_API_34_extension_level_7_arm64-v8a.avd" />
---+                  <value value="$USER_HOME$/.android/avd/Pixel_2_XL_API_34.avd" />
---                 </Key>
---               </deviceKey>
---             </Target>
---           </targetSelectedWithDropDown>
----          <timeTargetWasSelectedWithDropDown value="2024-03-07T06:20:12.158644Z" />
---+          <timeTargetWasSelectedWithDropDown value="2024-03-08T01:37:29.319537Z" />
---         </State>
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1" date="1709858046068" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-07, 5:32 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]" date="1709875694848" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-07, 10:27 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]" date="1709776443922" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-06, 6:54 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]" date="1709922127752" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2024-03-08, 11:22 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 38c35bcefe2d27f7b2bd1e9c077d0ff4323d94cf)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709776586445)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 38c35bcefe2d27f7b2bd1e9c077d0ff4323d94cf)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709776351659)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,50 +0,0 @@
---Index: app/build.gradle.kts
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>plugins {\r\n    id(\"com.android.application\")\r\n    id(\"com.google.gms.google-services\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.quantumscan\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.quantumscan\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n        }\r\n    }\r\n\r\n    buildFeatures{\r\n        viewBinding = true\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(platform(\"com.google.firebase:firebase-bom:32.7.1\"))\r\n    implementation(\"com.google.firebase:firebase-firestore\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"com.google.android.material:material:1.11.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n    implementation(\"androidx.fragment:fragment:1.3.6\")\r\n    implementation(\"androidx.activity:activity-ktx:1.4.0\")\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.3.5\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.3.5\")\r\n\r\n    // FireStore dependencies\r\n    implementation(\"com.google.firebase:firebase-firestore:24.10.2\")\r\n    implementation(\"com.google.firebase:firebase-bom:32.7.3\")\r\n\r\n    // QRCode dependencies\r\n    implementation (\"com.github.androidmads:QRGenerator:1.0.1\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n\r\n    // Image picker dependencies\r\n\r\n    // FireStore Test\r\n    implementation (\"org.mockito:mockito-core:4.0.0\")\r\n\r\n}
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/build.gradle.kts b/app/build.gradle.kts
------ a/app/build.gradle.kts	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/build.gradle.kts	(date 1709921245398)
---@@ -35,14 +35,20 @@
--- }
--- 
--- dependencies {
---+
---+    //implementation(file("/Users/zhiyangwang/Library/Android/sdk/platforms/android-34/android.jar"))
---+
---     implementation(platform("com.google.firebase:firebase-bom:32.7.1"))
---     implementation("com.google.firebase:firebase-firestore")
---     implementation("androidx.appcompat:appcompat:1.6.1")
---     implementation("com.google.android.material:material:1.11.0")
---     implementation("androidx.constraintlayout:constraintlayout:2.1.4")
---+
---     testImplementation("junit:junit:4.13.2")
---     androidTestImplementation("androidx.test.ext:junit:1.1.5")
---     androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
---+    testImplementation ("org.robolectric:robolectric:4.7.3")
---+
---     implementation("com.journeyapps:zxing-android-embedded:4.2.0")
---     implementation("androidx.fragment:fragment:1.3.6")
---     implementation("androidx.activity:activity-ktx:1.4.0")
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709922114108)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]" date="1709889934703" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-08, 2:25 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ /dev/null	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]" date="1709793777943" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-06, 11:42 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/deploymentTargetDropDown.xml
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
----- a/.idea/deploymentTargetDropDown.xml	(revision 6af95a45a3eedece5fa578c21f043edb1532f92a)
--+++ b/.idea/deploymentTargetDropDown.xml	(date 1710880128027)
--@@ -2,7 +2,7 @@
-- <project version="4">
--   <component name="deploymentTargetDropDown">
--     <value>
---      <entry key="Unnamed">
--+      <entry key="app">
--         <State />
--       </entry>
--     </value>
-Index: .idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19__3_40_p_m___Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19__3_40_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19__3_40_p_m___Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19__3_40_p_m___Changes_.xml	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ /dev/null	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Merge_at_2024-03-19,_3_40_p_m__[Changes]" date="1710884446968" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Merge at 2024-03-19, 3:40 p.m. [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19__3_40_p_m___Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19__3_40_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19__3_40_p_m___Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19__3_40_p_m___Changes_.xml	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ /dev/null	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-19,_3_40_p_m__[Changes]" date="1710884402142" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-19, 3:40 p.m. [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Merge_at_2024-03-19,_3_40_p_m__[Changes]/shelved.patch	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ /dev/null	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-@@ -1,355 +0,0 @@
--Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n    private FireStoreBridge fb  = new FireStoreBridge(\"EVENT\");;\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n    }\n\n    // REFERENCE CODE LINK: https://github.com/Everyday-Programmer/Upload-Image-to-Firebase-Android/blob/main/app/src/main/java/com/example/uploadimagefirebase/MainActivity.java\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n\n                        imageUrlUploadListener listener = null;\n                        listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n        //System.out.println(imageUri);\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                Event newEvent = new Event();\n                newEvent.EventIdGenerator(\"uyiuyui\"); //TODO: properly get user id\n                newEvent.setDescription(infoText);\n                newEvent.setTitle(nameText);\n                fb.updateEvent(newEvent,\"uyiuyui\"); //TODO: you just need to pass in newEvent and userid as parameter\n                finish();\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
----- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(date 1710884401633)
--@@ -59,7 +59,7 @@
-- 
--         selectImage = new SelectImage(this, activityResultLauncher);
--         buttonPickImage.setOnClickListener(v -> selectImage.pickImage());
---        //System.out.println(imageUri);
--+        System.out.println("imageUri after pick" + imageUri);
-- 
-- 
-- 
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	
---+++ b/.idea/deploymentTargetDropDown.xml	
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,72 +0,0 @@
---Index: app/src/main/java/com/example/quantumscan/QRCodeGenerator.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.util.Base64;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.QRCodeWriter;\n\nimport java.io.ByteArrayOutputStream;\n\n// get Bitmap, this Bitmap can be used in imageView.setImageBitmap(bitmap); to display\n// Bitmap qrCodeBitmap = QRCodeHelper.generateQRCodeBitmap(\"sample text\", 250, 250);\n// imageView.setImageBitmap(bitmap)\npublic class QRCodeGenerator {\n    public static Bitmap generateQRCodeBitmap(String text, int width, int height){\n        QRCodeWriter writer = new QRCodeWriter();\n        BitMatrix bitMatrix = null;\n        try {\n            bitMatrix = writer.encode(text, BarcodeFormat.QR_CODE, width, height);\n        } catch (WriterException e) {\n            throw new RuntimeException(e);\n        }\n        Bitmap bitmap = Bitmap.createBitmap(250, 250, Bitmap.Config.RGB_565);\n        for (int x = 0; x < bitMatrix.getWidth(); x++) {\n            for (int y = 0; y < bitMatrix.getHeight(); y++) {\n                bitmap.setPixel(x, y, bitMatrix.get(x, y) ? android.graphics.Color.BLACK : android.graphics.Color.WHITE);\n            }\n        }\n        return bitmap;\n    }\n\n    // transfer bitmap to base64 format, this format can be stored in firestore\n    // String base64Image = QRCodeHelper.bitmapToBase64(qrCodeBitmap);\n    public static String bitmapToBase64(Bitmap bitmap){\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);\n        byte[] byteArray = byteArrayOutputStream.toByteArray();\n        String base64Image = Base64.encodeToString(byteArray, Base64.DEFAULT);\n        return base64Image;\n    }\n\n    // after take base64 string from firestore, this function transfer base64 to bitmap format, then can be displayed.\n    // Bitmap decodedBitmap = QRCodeHelper.base64ToBitmap(base64Image);\n    // imageView.setImageBitmap(bitmap)\n    public static Bitmap base64ToBitmap(String base64Str){\n        byte[] decodedBytes = Base64.decode(base64Str, Base64.DEFAULT);\n        Bitmap bitmap2 = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);\n        return bitmap2;\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java b/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java
------ a/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java	(date 1709889719046)
---@@ -14,6 +14,8 @@
--- // get Bitmap, this Bitmap can be used in imageView.setImageBitmap(bitmap); to display
--- // Bitmap qrCodeBitmap = QRCodeHelper.generateQRCodeBitmap("sample text", 250, 250);
--- // imageView.setImageBitmap(bitmap)
---+
---+// REFERENCE CODE LINK: https://stackoverflow.com/questions/8800919/how-to-generate-a-qr-code-for-an-android-application
--- public class QRCodeGenerator {
---     public static Bitmap generateQRCodeBitmap(String text, int width, int height){
---         QRCodeWriter writer = new QRCodeWriter();
---@@ -34,6 +36,7 @@
--- 
---     // transfer bitmap to base64 format, this format can be stored in firestore
---     // String base64Image = QRCodeHelper.bitmapToBase64(qrCodeBitmap);
---+    // REFERENCE CODE LINK: https://stackoverflow.com/questions/9224056/android-bitmap-to-base64-string
---     public static String bitmapToBase64(Bitmap bitmap){
---         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
---         bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
---@@ -45,6 +48,7 @@
---     // after take base64 string from firestore, this function transfer base64 to bitmap format, then can be displayed.
---     // Bitmap decodedBitmap = QRCodeHelper.base64ToBitmap(base64Image);
---     // imageView.setImageBitmap(bitmap)
---+    // REFERENCE CODE LINK: https://stackoverflow.com/questions/4837110/how-to-convert-a-base64-string-into-a-bitmap-image-to-show-it-in-a-imageview
---     public static Bitmap base64ToBitmap(String base64Str){
---         byte[] decodedBytes = Base64.decode(base64Str, Base64.DEFAULT);
---         Bitmap bitmap2 = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);
---Index: app/src/main/java/com/example/quantumscan/SelectImage.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultCallback;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\n\npublic class SelectImage {\n    private final Activity activity;\n    private final ActivityResultLauncher<Intent> activityResultLauncher;\n\n    public SelectImage(Activity activity, ActivityResultLauncher<Intent> activityResultLauncher) {\n        this.activity = activity;\n        this.activityResultLauncher = activityResultLauncher;\n    }\n\n    public void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        activityResultLauncher.launch(intent);\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/SelectImage.java b/app/src/main/java/com/example/quantumscan/SelectImage.java
------ a/app/src/main/java/com/example/quantumscan/SelectImage.java	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/src/main/java/com/example/quantumscan/SelectImage.java	(date 1709875657436)
---@@ -20,6 +20,7 @@
---     }
--- 
---     public void pickImage() {
---+
---         Intent intent = new Intent(Intent.ACTION_PICK);
---         intent.setType("image/*");
---         activityResultLauncher.launch(intent);
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709875818948)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,43 +0,0 @@
---Index: app/src/main/java/com/example/quantumscan/SelectImage.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultCallback;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\n\npublic class SelectImage {\n    private final Activity activity;\n    private final ActivityResultLauncher<Intent> activityResultLauncher;\n\n    public SelectImage(Activity activity, ActivityResultLauncher<Intent> activityResultLauncher) {\n        this.activity = activity;\n        this.activityResultLauncher = activityResultLauncher;\n    }\n\n    public void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        activityResultLauncher.launch(intent);\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/SelectImage.java b/app/src/main/java/com/example/quantumscan/SelectImage.java
------ a/app/src/main/java/com/example/quantumscan/SelectImage.java	(revision 23065c595ff8eed454e439e016abc7ff5a285731)
---+++ b/app/src/main/java/com/example/quantumscan/SelectImage.java	(date 1709863215500)
---@@ -20,6 +20,7 @@
---     }
--- 
---     public void pickImage() {
---+
---         Intent intent = new Intent(Intent.ACTION_PICK);
---         intent.setType("image/*");
---         activityResultLauncher.launch(intent);
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"app\">\n        <State>\n          <targetSelectedWithDropDown>\n            <Target>\n              <type value=\"QUICK_BOOT_TARGET\" />\n              <deviceKey>\n                <Key>\n                  <type value=\"VIRTUAL_DEVICE_PATH\" />\n                  <value value=\"$USER_HOME$/.android/avd/Pixel_3a_API_34_extension_level_7_arm64-v8a.avd\" />\n                </Key>\n              </deviceKey>\n            </Target>\n          </targetSelectedWithDropDown>\n          <timeTargetWasSelectedWithDropDown value=\"2024-03-07T06:20:12.158644Z\" />\n        </State>\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 23065c595ff8eed454e439e016abc7ff5a285731)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709861853209)
---@@ -10,12 +10,12 @@
---               <deviceKey>
---                 <Key>
---                   <type value="VIRTUAL_DEVICE_PATH" />
----                  <value value="$USER_HOME$/.android/avd/Pixel_3a_API_34_extension_level_7_arm64-v8a.avd" />
---+                  <value value="$USER_HOME$/.android/avd/Pixel_2_XL_API_34.avd" />
---                 </Key>
---               </deviceKey>
---             </Target>
---           </targetSelectedWithDropDown>
----          <timeTargetWasSelectedWithDropDown value="2024-03-07T06:20:12.158644Z" />
---+          <timeTargetWasSelectedWithDropDown value="2024-03-08T01:37:29.319537Z" />
---         </State>
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1" date="1709858046068" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-07, 5:32 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]" date="1709875694848" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-07, 10:27 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]" date="1709776443922" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-06, 6:54 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]" date="1709922127752" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2024-03-08, 11:22 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 38c35bcefe2d27f7b2bd1e9c077d0ff4323d94cf)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709776586445)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 38c35bcefe2d27f7b2bd1e9c077d0ff4323d94cf)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709776351659)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,50 +0,0 @@
---Index: app/build.gradle.kts
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>plugins {\r\n    id(\"com.android.application\")\r\n    id(\"com.google.gms.google-services\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.quantumscan\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.quantumscan\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n        }\r\n    }\r\n\r\n    buildFeatures{\r\n        viewBinding = true\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(platform(\"com.google.firebase:firebase-bom:32.7.1\"))\r\n    implementation(\"com.google.firebase:firebase-firestore\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"com.google.android.material:material:1.11.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n    implementation(\"androidx.fragment:fragment:1.3.6\")\r\n    implementation(\"androidx.activity:activity-ktx:1.4.0\")\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.3.5\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.3.5\")\r\n\r\n    // FireStore dependencies\r\n    implementation(\"com.google.firebase:firebase-firestore:24.10.2\")\r\n    implementation(\"com.google.firebase:firebase-bom:32.7.3\")\r\n\r\n    // QRCode dependencies\r\n    implementation (\"com.github.androidmads:QRGenerator:1.0.1\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n\r\n    // Image picker dependencies\r\n\r\n    // FireStore Test\r\n    implementation (\"org.mockito:mockito-core:4.0.0\")\r\n\r\n}
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/build.gradle.kts b/app/build.gradle.kts
------ a/app/build.gradle.kts	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/build.gradle.kts	(date 1709921245398)
---@@ -35,14 +35,20 @@
--- }
--- 
--- dependencies {
---+
---+    //implementation(file("/Users/zhiyangwang/Library/Android/sdk/platforms/android-34/android.jar"))
---+
---     implementation(platform("com.google.firebase:firebase-bom:32.7.1"))
---     implementation("com.google.firebase:firebase-firestore")
---     implementation("androidx.appcompat:appcompat:1.6.1")
---     implementation("com.google.android.material:material:1.11.0")
---     implementation("androidx.constraintlayout:constraintlayout:2.1.4")
---+
---     testImplementation("junit:junit:4.13.2")
---     androidTestImplementation("androidx.test.ext:junit:1.1.5")
---     androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
---+    testImplementation ("org.robolectric:robolectric:4.7.3")
---+
---     implementation("com.journeyapps:zxing-android-embedded:4.2.0")
---     implementation("androidx.fragment:fragment:1.3.6")
---     implementation("androidx.activity:activity-ktx:1.4.0")
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709922114108)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]" date="1709889934703" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-08, 2:25 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--+++ /dev/null	(revision c50c6ca7254e17113de77cd96d0e5cbd997c75bf)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]" date="1709793777943" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-06, 11:42 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19__2_28_p_m___Changes_.xml
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19__2_28_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19__2_28_p_m___Changes_.xml
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19__2_28_p_m___Changes_.xml	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ /dev/null	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-@@ -1,4 +0,0 @@
--<changelist name="Uncommitted_changes_before_Update_at_2024-03-19,_2_28_p_m__[Changes]" date="1710880110416" recycled="true" deleted="true">
--  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19,_2_28_p_m__[Changes]/shelved.patch" />
--  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2024-03-19, 2:28 p.m. [Changes]" />
--</changelist>
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19,_2_28_p_m__[Changes]/shelved.patch
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19,_2_28_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19,_2_28_p_m__[Changes]/shelved.patch
-deleted file mode 100644
---- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-19,_2_28_p_m__[Changes]/shelved.patch	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ /dev/null	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-@@ -1,355 +0,0 @@
--Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
--IDEA additional info:
--Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
--<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n    private String userID = \"1658f5315ca1a74d\";\n    private FireStoreBridge fb  = new FireStoreBridge(\"EVENT\");;\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n    }\n\n    // REFERENCE CODE LINK: https://github.com/Everyday-Programmer/Upload-Image-to-Firebase-Android/blob/main/app/src/main/java/com/example/uploadimagefirebase/MainActivity.java\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n\n                        imageUrlUploadListener listener = null;\n                        listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n        //System.out.println(imageUri);\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                Event newEvent = new Event();\n                newEvent.EventIdGenerator(userID);\n                newEvent.setDescription(infoText);\n                newEvent.setTitle(nameText);\n                fb.updateEvent(newEvent,userID);\n                finish();\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
--Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
--<+>UTF-8
--===================================================================
--diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
----- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(date 1709931682363)
--@@ -60,7 +60,7 @@
-- 
--         selectImage = new SelectImage(this, activityResultLauncher);
--         buttonPickImage.setOnClickListener(v -> selectImage.pickImage());
---        //System.out.println(imageUri);
--+        System.out.println("imageUri after pick" + imageUri);
-- 
-- 
-- 
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	
---+++ b/.idea/deploymentTargetDropDown.xml	
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,72 +0,0 @@
---Index: app/src/main/java/com/example/quantumscan/QRCodeGenerator.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.util.Base64;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.QRCodeWriter;\n\nimport java.io.ByteArrayOutputStream;\n\n// get Bitmap, this Bitmap can be used in imageView.setImageBitmap(bitmap); to display\n// Bitmap qrCodeBitmap = QRCodeHelper.generateQRCodeBitmap(\"sample text\", 250, 250);\n// imageView.setImageBitmap(bitmap)\npublic class QRCodeGenerator {\n    public static Bitmap generateQRCodeBitmap(String text, int width, int height){\n        QRCodeWriter writer = new QRCodeWriter();\n        BitMatrix bitMatrix = null;\n        try {\n            bitMatrix = writer.encode(text, BarcodeFormat.QR_CODE, width, height);\n        } catch (WriterException e) {\n            throw new RuntimeException(e);\n        }\n        Bitmap bitmap = Bitmap.createBitmap(250, 250, Bitmap.Config.RGB_565);\n        for (int x = 0; x < bitMatrix.getWidth(); x++) {\n            for (int y = 0; y < bitMatrix.getHeight(); y++) {\n                bitmap.setPixel(x, y, bitMatrix.get(x, y) ? android.graphics.Color.BLACK : android.graphics.Color.WHITE);\n            }\n        }\n        return bitmap;\n    }\n\n    // transfer bitmap to base64 format, this format can be stored in firestore\n    // String base64Image = QRCodeHelper.bitmapToBase64(qrCodeBitmap);\n    public static String bitmapToBase64(Bitmap bitmap){\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);\n        byte[] byteArray = byteArrayOutputStream.toByteArray();\n        String base64Image = Base64.encodeToString(byteArray, Base64.DEFAULT);\n        return base64Image;\n    }\n\n    // after take base64 string from firestore, this function transfer base64 to bitmap format, then can be displayed.\n    // Bitmap decodedBitmap = QRCodeHelper.base64ToBitmap(base64Image);\n    // imageView.setImageBitmap(bitmap)\n    public static Bitmap base64ToBitmap(String base64Str){\n        byte[] decodedBytes = Base64.decode(base64Str, Base64.DEFAULT);\n        Bitmap bitmap2 = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);\n        return bitmap2;\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java b/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java
------ a/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/src/main/java/com/example/quantumscan/QRCodeGenerator.java	(date 1709889719046)
---@@ -14,6 +14,8 @@
--- // get Bitmap, this Bitmap can be used in imageView.setImageBitmap(bitmap); to display
--- // Bitmap qrCodeBitmap = QRCodeHelper.generateQRCodeBitmap("sample text", 250, 250);
--- // imageView.setImageBitmap(bitmap)
---+
---+// REFERENCE CODE LINK: https://stackoverflow.com/questions/8800919/how-to-generate-a-qr-code-for-an-android-application
--- public class QRCodeGenerator {
---     public static Bitmap generateQRCodeBitmap(String text, int width, int height){
---         QRCodeWriter writer = new QRCodeWriter();
---@@ -34,6 +36,7 @@
--- 
---     // transfer bitmap to base64 format, this format can be stored in firestore
---     // String base64Image = QRCodeHelper.bitmapToBase64(qrCodeBitmap);
---+    // REFERENCE CODE LINK: https://stackoverflow.com/questions/9224056/android-bitmap-to-base64-string
---     public static String bitmapToBase64(Bitmap bitmap){
---         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
---         bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
---@@ -45,6 +48,7 @@
---     // after take base64 string from firestore, this function transfer base64 to bitmap format, then can be displayed.
---     // Bitmap decodedBitmap = QRCodeHelper.base64ToBitmap(base64Image);
---     // imageView.setImageBitmap(bitmap)
---+    // REFERENCE CODE LINK: https://stackoverflow.com/questions/4837110/how-to-convert-a-base64-string-into-a-bitmap-image-to-show-it-in-a-imageview
---     public static Bitmap base64ToBitmap(String base64Str){
---         byte[] decodedBytes = Base64.decode(base64Str, Base64.DEFAULT);
---         Bitmap bitmap2 = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);
---Index: app/src/main/java/com/example/quantumscan/SelectImage.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultCallback;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\n\npublic class SelectImage {\n    private final Activity activity;\n    private final ActivityResultLauncher<Intent> activityResultLauncher;\n\n    public SelectImage(Activity activity, ActivityResultLauncher<Intent> activityResultLauncher) {\n        this.activity = activity;\n        this.activityResultLauncher = activityResultLauncher;\n    }\n\n    public void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        activityResultLauncher.launch(intent);\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/SelectImage.java b/app/src/main/java/com/example/quantumscan/SelectImage.java
------ a/app/src/main/java/com/example/quantumscan/SelectImage.java	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/src/main/java/com/example/quantumscan/SelectImage.java	(date 1709875657436)
---@@ -20,6 +20,7 @@
---     }
--- 
---     public void pickImage() {
---+
---         Intent intent = new Intent(Intent.ACTION_PICK);
---         intent.setType("image/*");
---         activityResultLauncher.launch(intent);
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709875818948)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,43 +0,0 @@
---Index: app/src/main/java/com/example/quantumscan/SelectImage.java
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultCallback;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\n\npublic class SelectImage {\n    private final Activity activity;\n    private final ActivityResultLauncher<Intent> activityResultLauncher;\n\n    public SelectImage(Activity activity, ActivityResultLauncher<Intent> activityResultLauncher) {\n        this.activity = activity;\n        this.activityResultLauncher = activityResultLauncher;\n    }\n\n    public void pickImage() {\n        Intent intent = new Intent(Intent.ACTION_PICK);\n        intent.setType(\"image/*\");\n        activityResultLauncher.launch(intent);\n    }\n\n}\n
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/src/main/java/com/example/quantumscan/SelectImage.java b/app/src/main/java/com/example/quantumscan/SelectImage.java
------ a/app/src/main/java/com/example/quantumscan/SelectImage.java	(revision 23065c595ff8eed454e439e016abc7ff5a285731)
---+++ b/app/src/main/java/com/example/quantumscan/SelectImage.java	(date 1709863215500)
---@@ -20,6 +20,7 @@
---     }
--- 
---     public void pickImage() {
---+
---         Intent intent = new Intent(Intent.ACTION_PICK);
---         intent.setType("image/*");
---         activityResultLauncher.launch(intent);
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"app\">\n        <State>\n          <targetSelectedWithDropDown>\n            <Target>\n              <type value=\"QUICK_BOOT_TARGET\" />\n              <deviceKey>\n                <Key>\n                  <type value=\"VIRTUAL_DEVICE_PATH\" />\n                  <value value=\"$USER_HOME$/.android/avd/Pixel_3a_API_34_extension_level_7_arm64-v8a.avd\" />\n                </Key>\n              </deviceKey>\n            </Target>\n          </targetSelectedWithDropDown>\n          <timeTargetWasSelectedWithDropDown value=\"2024-03-07T06:20:12.158644Z\" />\n        </State>\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 23065c595ff8eed454e439e016abc7ff5a285731)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709861853209)
---@@ -10,12 +10,12 @@
---               <deviceKey>
---                 <Key>
---                   <type value="VIRTUAL_DEVICE_PATH" />
----                  <value value="$USER_HOME$/.android/avd/Pixel_3a_API_34_extension_level_7_arm64-v8a.avd" />
---+                  <value value="$USER_HOME$/.android/avd/Pixel_2_XL_API_34.avd" />
---                 </Key>
---               </deviceKey>
---             </Target>
---           </targetSelectedWithDropDown>
----          <timeTargetWasSelectedWithDropDown value="2024-03-07T06:20:12.158644Z" />
---+          <timeTargetWasSelectedWithDropDown value="2024-03-08T01:37:29.319537Z" />
---         </State>
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__5_32_p_m___Changes_1.xml	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1" date="1709858046068" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_5_32_p_m__[Changes]1/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-07, 5:32 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07__10_27_p_m___Changes_.xml	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]" date="1709875694848" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-07,_10_27_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-07, 10:27 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__6_54_p_m___Changes_.xml	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]" date="1709776443922" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-06, 6:54 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08__11_22_a_m___Changes_.xml	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]" date="1709922127752" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2024-03-08, 11:22 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 38c35bcefe2d27f7b2bd1e9c077d0ff4323d94cf)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709776586445)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_6_54_p_m__[Changes]/shelved.patch	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,19 +0,0 @@
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 38c35bcefe2d27f7b2bd1e9c077d0ff4323d94cf)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709776351659)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Update_at_2024-03-08,_11_22_a_m__[Changes]/shelved.patch	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,50 +0,0 @@
---Index: app/build.gradle.kts
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+>plugins {\r\n    id(\"com.android.application\")\r\n    id(\"com.google.gms.google-services\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.quantumscan\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.quantumscan\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n        }\r\n    }\r\n\r\n    buildFeatures{\r\n        viewBinding = true\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation(platform(\"com.google.firebase:firebase-bom:32.7.1\"))\r\n    implementation(\"com.google.firebase:firebase-firestore\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"com.google.android.material:material:1.11.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n    implementation(\"androidx.fragment:fragment:1.3.6\")\r\n    implementation(\"androidx.activity:activity-ktx:1.4.0\")\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.3.5\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.3.5\")\r\n\r\n    // FireStore dependencies\r\n    implementation(\"com.google.firebase:firebase-firestore:24.10.2\")\r\n    implementation(\"com.google.firebase:firebase-bom:32.7.3\")\r\n\r\n    // QRCode dependencies\r\n    implementation (\"com.github.androidmads:QRGenerator:1.0.1\")\r\n    implementation(\"com.journeyapps:zxing-android-embedded:4.2.0\")\r\n\r\n    // Image picker dependencies\r\n\r\n    // FireStore Test\r\n    implementation (\"org.mockito:mockito-core:4.0.0\")\r\n\r\n}
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/app/build.gradle.kts b/app/build.gradle.kts
------ a/app/build.gradle.kts	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/app/build.gradle.kts	(date 1709921245398)
---@@ -35,14 +35,20 @@
--- }
--- 
--- dependencies {
---+
---+    //implementation(file("/Users/zhiyangwang/Library/Android/sdk/platforms/android-34/android.jar"))
---+
---     implementation(platform("com.google.firebase:firebase-bom:32.7.1"))
---     implementation("com.google.firebase:firebase-firestore")
---     implementation("androidx.appcompat:appcompat:1.6.1")
---     implementation("com.google.android.material:material:1.11.0")
---     implementation("androidx.constraintlayout:constraintlayout:2.1.4")
---+
---     testImplementation("junit:junit:4.13.2")
---     androidTestImplementation("androidx.test.ext:junit:1.1.5")
---     androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
---+    testImplementation ("org.robolectric:robolectric:4.7.3")
---+
---     implementation("com.journeyapps:zxing-android-embedded:4.2.0")
---     implementation("androidx.fragment:fragment:1.3.6")
---     implementation("androidx.activity:activity-ktx:1.4.0")
---Index: .idea/deploymentTargetDropDown.xml
---IDEA additional info:
---Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
---<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"Unnamed\">\n        <State />\n      </entry>\n    </value>\n  </component>\n</project>
---Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
---<+>UTF-8
---===================================================================
---diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
------ a/.idea/deploymentTargetDropDown.xml	(revision 797c1940dd95195ad533c37f461d131221199653)
---+++ b/.idea/deploymentTargetDropDown.xml	(date 1709922114108)
---@@ -2,7 +2,7 @@
--- <project version="4">
---   <component name="deploymentTargetDropDown">
---     <value>
----      <entry key="Unnamed">
---+      <entry key="app">
---         <State />
---       </entry>
---     </value>
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08__2_25_a_m___Changes_.xml	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]" date="1709889934703" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-08,_2_25_a_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-08, 2:25 a.m. [Changes]" />
---</changelist>
--\ No newline at end of file
--Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml
--===================================================================
--diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml
--deleted file mode 100644
----- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06__11_42_p_m___Changes_.xml	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--+++ /dev/null	(revision 70cb5d3ea5b05fd358124d46c9d2b5598c6b7090)
--@@ -1,4 +0,0 @@
---<changelist name="Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]" date="1709793777943" recycled="true" deleted="true">
---  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-06,_11_42_p_m__[Changes]/shelved.patch" />
---  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2024-03-06, 11:42 p.m. [Changes]" />
---</changelist>
--\ No newline at end of file
-Index: app/src/main/java/com/example/quantumscan/OrganizerEventPage.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerEventPage extends AppCompatActivity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_event_homepage);\n\n        TextView eventNameView = findViewById(R.id.textView_eventName);\n        Button backButton = findViewById(R.id.returnButton);\n        Button infoButton = findViewById(R.id.buttonInfo);\n        Button listButton = findViewById(R.id.buttonViewAttend);\n        Button posterButton = findViewById(R.id.buttonPoster);\n\n        // Retrieve the city name passed from MainActivity\n        String eventID = getIntent().getStringExtra(\"eventID\");\n        String eventName = getIntent().getStringExtra(\"eventName\");\n        eventNameView.setText(eventName);\n\n        /*\n        Event eventOBJ = DataHolder.getInstance().getEvent(eventID);\n        System.out.println(\"Title:\"+ eventOBJ.getTitle());\n\n         */\n\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Go back to MainActivity\n                finish();\n            }\n        });\n\n        infoButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerEventInfo.class);\n                detailIntent.putExtra(\"eventID\", eventID);\n                detailIntent.putExtra(\"eventName\", eventName);\n                startActivity(detailIntent);\n            }\n        });\n\n        listButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerViewAttendees.class);\n                detailIntent.putExtra(\"eventID\", eventID);\n                detailIntent.putExtra(\"eventName\", eventName);\n                startActivity(detailIntent);\n            }\n        });\n\n        posterButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);\n                startActivity(intent);\n            }\n        });\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java b/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java	(revision 5467b6969d59fbfbe35f22a18968bd07b2c7bea4)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java	(date 1711003786419)
-@@ -62,8 +62,10 @@
-         posterButton.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
--                Intent intent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);
--                startActivity(intent);
-+                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);
-+                detailIntent.putExtra("eventID", eventID);
-+                detailIntent.putExtra("eventName", eventName);
-+                startActivity(detailIntent);
-             }
-         });
-     }
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2024-03-31,_12_12_a_m__[Changes]/shelved.patch	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
+++ /dev/null	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
@@ -1,182 +0,0 @@
-Index: app/src/main/java/com/example/quantumscan/FireStoreBridge.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.util.Log;\nimport android.widget.ImageView;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.FieldPath;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageReference;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class FireStoreBridge implements OrganizerCreateEvent.imageUrlUploadListener{\n    private FirebaseFirestore db;\n    private CollectionReference collectionName;\n    private String c;\n    private Query query;\n    private FirebaseStorage storage;\n\n    public FireStoreBridge(String collectionName){\n        c = collectionName;\n        this.db = FirebaseFirestore.getInstance();\n        this.collectionName = this.db.collection(collectionName);\n        this.query = this.collectionName;\n        this.storage = FirebaseStorage.getInstance();\n    }\n    public FirebaseFirestore getDb() {\n        return db;\n    }\n\n    public CollectionReference getCollectionName() {\n        return collectionName;\n    }\n\n    public interface OnUserRetrievedListener {\n        void onUserRetrieved(User user, ArrayList<String> attendeeRoles, ArrayList<String> organizerRoles);\n    }\n\n    public interface OnEventRetrievedListener {\n        void onEventRetrieved(ArrayList<Event> event, ArrayList<String> organizerList);\n\n    }\n\n    private interface OnEventRetrievedListenerHelper{\n        void onAttendeeRetrieved(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    private interface OnCheckedInListener{\n        void onCheckedInListener(ArrayList<AttendeeFireBaseHolder> attendeeList);\n    }\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param userID the height of the rectangle, must be non-negative\n     */\n    public void retrieveUser(String userID, OnUserRetrievedListener listener) {\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), userID);\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    User user = new User(null,null,null, null,null);\n                    ArrayList<String> attendeeRoles = new ArrayList<String>();\n                    ArrayList<String> organizerRoles = new ArrayList<String>();\n                    for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                        // Retrieve user data from document and set properties of the User object\n                        user.setName(documentSnapshot.getString(\"name\"));\n                        user.setProfilePicture(documentSnapshot.getString(\"profilePicture\"));\n                        user.setPhone(documentSnapshot.getString(\"phone\"));\n                        user.setUniversity(documentSnapshot.getString(\"university\"));\n                        user.setEmail(documentSnapshot.getString(\"email\"));\n                        user.setId(documentSnapshot.getString(\"id\"));\n                        List<String> list1 = (List<String>) documentSnapshot.get(\"attendeeRoles\");\n                        List<String> list2 = (List<String>) documentSnapshot.get(\"organizerRoles\");\n                        attendeeRoles = (ArrayList<String>) list1;\n                        organizerRoles = (ArrayList<String>) list2;\n\n                    }\n\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onUserRetrieved(user, attendeeRoles, organizerRoles);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n                    listener.onUserRetrieved(null,null,null);\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * @param eventId the height of the rectangle, must be non-negative\n     */\n\n    public void retrieveEvent(String eventId, OnEventRetrievedListener listener){\n        this.query = this.collectionName.whereEqualTo(FieldPath.documentId(), eventId);\n\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n                        organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n\n\n                    }\n                    // Notify the listener with the retrieved user object is complete\n\n\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param listener a interface that contain retrieved data which is stored in a firebase holder\n     * */\n    public void retrieveAllEvent(OnEventRetrievedListener listener) {\n        this.query = this.collectionName;\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n                    ArrayList<Event> eventList = new ArrayList<>();\n                    ArrayList<String> organizerIdList = new ArrayList<>();\n\n                    for (QueryDocumentSnapshot documentSnapshot0 : task.getResult()) {\n                        // read each event\n                        Event event = new Event();\n                        //OrganizerFireBaseHolder organizer = new OrganizerFireBaseHolder();\n                        //retrieve event information\n                        event.setId(documentSnapshot0.getString(\"id\"));\n                        event.setAnnouncement((ArrayList<String>) documentSnapshot0.get(\"announcements\"));\n                        event.setPosterCode(documentSnapshot0.getString(\"posterCode\"));\n                        event.setEventCode(documentSnapshot0.getString(\"eventCode\"));\n                        event.setTitle(documentSnapshot0.getString(\"title\"));\n                        event.setDescription(documentSnapshot0.getString(\"description\"));\n\n                       organizerIdList.add(documentSnapshot0.getString(\"organizer\"));\n\n                        // TODO: for check in data retrieve\n                        //retrieve Organizer info\n                        //CollectionReference attendeeListRef = getCollectionName();\n                        //retrieve attendee belong to this event\n                        // retrieveAllEventHelper(attendeeListRef, organizer);\n                        //organizerList.add(organizer);\n                        eventList.add(event);\n                    }\n                    // Notify the listener with the retrieved user object is complete\n                    listener.onEventRetrieved(eventList, organizerIdList);\n                } else {\n                    // Handle the case where the task failed\n                    Exception e = task.getException();\n                    System.out.println(\"Query failed: \" + e.getMessage());\n                    // Notify the listener with a null user object\n\n                }\n            }\n        });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param attendeeListRef a interface that contain retrieved data which is stored in a firebase holder\n     * @param organizer a interface that contain retrieved data which is stored in a firebase holder\n     *\n     * */\n    private void retrieveAllEventHelper(CollectionReference attendeeListRef, OrganizerFireBaseHolder organizer){\n        // TODO: This is for check in status retrieve\n        /*\n        retrieve attendeelist in each event documentation\n         */\n        attendeeListRef.document().collection(\"attendeeList\").get()\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                    @Override\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                        if (task.isSuccessful()) {\n                            ArrayList<AttendeeFireBaseHolder> attendeeFireBaseHolders = new ArrayList<>();\n\n                            for (QueryDocumentSnapshot documentSnapshot1 : task.getResult()) {\n                                AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                                attendee.setCheckInCount(Objects.requireNonNull(documentSnapshot1.getLong(\"checkInCount\")).intValue());\n                                attendee.setName(documentSnapshot1.getString(\"name\"));\n                                attendee.setId(documentSnapshot1.getString(\"id\"));\n                                attendee.setCheckedIn(documentSnapshot1.getBoolean(\"checkedIn\"));\n                                attendeeFireBaseHolders.add(attendee);\n                            }\n\n                        }else {\n                            // Handle the case where the task failed\n                            Exception e = task.getException();\n                            System.out.println(\"Query failed: \" + e.getMessage());\n                            // Notify the listener with a null user object\n\n                        }\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * @param user a interface that contain retrieved data which is stored in a firebase holder*\n     * */\n    public void updateUser(UserFireBaseHolder user){\n        String userID = user.getId();\n        this.collectionName.document(userID).update(\"name\", user.getName());\n        this.collectionName.document(userID).update(\"university\", user.getUniversity());\n        this.collectionName.document(userID).update(\"phone\", user.getPhone());\n        this.collectionName.document(userID).update(\"email\", user.getEmail());\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEvent(Event eventInfo, String organizerID){\n        // get event id\n        String eventId= eventInfo.getId();\n        System.out.println(eventId);\n\n        // create an attendeeList that will be added to organizer <both are firebase holder>\n        ArrayList<AttendeeListFireBaseHolder> attendeeList = new ArrayList<>();\n        for (int i = 0; i < eventInfo.getAttendees().size(); i++){\n            AttendeeListFireBaseHolder attendee = new AttendeeListFireBaseHolder(\n                    eventInfo.getAttendees().get(i).getId(),\n                    eventInfo.getAttendees().get(i).isCheckedIn(),\n                    eventInfo.getAttendees().get(i).getName(),\n                    eventInfo.getAttendees().get(i).getCheckInCount());\n            attendeeList.add(attendee);\n        }//eventInfo.getOrganizer().getUser().getId() eventInfo.getOrganizer().getUser().getId()\n        EventFireBaseHolder event = new EventFireBaseHolder(\n                eventInfo.getAnnouncement(),\n                eventInfo.getDescription(),\n                eventInfo.getEventCode(),\n                eventId,\n                organizerID,\n                eventInfo.getPosterCode(),\n                eventInfo.getTitle());\n        this.updateEventHelper(eventId, organizerID);\n        this.collectionName.document(eventId).set(event)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    private void updateEventHelper(String eventID, String organizerID){\n        CollectionReference userCollection = this.getDb().collection(\"USER\");\n        userCollection.document(organizerID).update(\"organizerRoles\", FieldValue.arrayUnion(eventID))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });;\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateEventDescription(String eventId, String description){\n\n        this.collectionName.document(eventId).update(\"description\", description)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    @Override\n    public void updateEventImage(String eventId, String imageURL){\n        this.collectionName.document(eventId).update(\"posterCode\", imageURL).addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        Log.d(TAG, \"Welcome !\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                    }\n                });\n\n    }\n\n    @Override\n    public void uploadEventImage(Event newEvent, String evenID, Uri imageUri) {\n        StorageReference imageRef = storage.getReference().child(newEvent.getId() + \".jpg\");\n        imageRef.putFile(imageUri);\n    }\n\n    public void displayImage(String EventID, ImageView imageView){\n        StorageReference islandRef = this.storage.getReference().child(EventID+\".jpg\");\n\n        final long ONE_MEGABYTE = 1024 * 1024;\n        islandRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener<byte[]>() {\n            @Override\n            public void onSuccess(byte[] bytes) {\n                Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\n                imageView.setImageBitmap(bitmap);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception exception) {\n                // Handle any errors\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void updateAttendeeCheckIn(String userId, String eventId){\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkedIn\", true)\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n        this.collectionName.document(eventId).collection(\"attendeeList\").document(userId).update(\"checkInCount\", FieldValue.increment(1))\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                    @Override\n                    public void onSuccess(Void aVoid) {\n                        System.out.println(\"event upload successfully\");\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        System.out.println(\"event upload failed\");\n                    }\n                });\n\n    }\n\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n    public void retrieveAttendeeCheckIn(String eventId, OnCheckedInListener listener){\n        this.query = this.collectionName.document(eventId).collection(\"attendeeList\");\n        this.query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                ArrayList<AttendeeFireBaseHolder> attendeeList = new ArrayList<>();\n                if (task.isSuccessful()) {\n                    for (QueryDocumentSnapshot document : task.getResult()) {\n                        AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n                        attendee.setCheckInCount(document.getLong(\"checkInCount\").intValue());\n                        attendee.setName(document.getString(\"name\"));\n                        attendee.setId(document.getId());\n                        attendee.setCheckedIn(document.getBoolean(\"checkedIn\"));\n                        attendeeList.add(attendee);\n                    }\n                } else {\n\n                }\n                listener.onCheckedInListener(attendeeList);\n            }\n\n        });\n\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n\n\n    public void updateAttendeeSignUpToEvent(String userId, String eventId){\n        CollectionReference newCollection =  getDb().collection(\"EVENT\");\n        Query newQuery;\n        newQuery = newCollection.whereEqualTo(FieldPath.documentId(), eventId);\n        newQuery.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot documentSnapshot : task.getResult()) {\n                    long attendeeLimit = documentSnapshot.getLong(\"attendeeLimit\");\n                    long currentTotalAttendee = documentSnapshot.getLong(\"currentTotalAttendee\");\n                    if (currentTotalAttendee < attendeeLimit){\n                        updateAttendeeSignUpHelper(userId, eventId);\n                    }else{\n\n                    }\n                }\n\n            }\n        });\n\n    }\n\n    /**\n     * find user in a database:\n     * <p>\n     * This method is responsible for retrieving user information given the user id.\n     * user id should be directly obtained from the database or from the device\n     * </p>\n     * */\n\n    public void updateAttendeeSignUpHelper(String userId, String eventId){\n        CollectionReference eventCollection =  getDb().collection(\"EVENT\");\n        CollectionReference userCollection =  getDb().collection(\"USER\");\n        System.out.println(userId+\"1234567890\");\n\n        Query newQuery = userCollection.whereEqualTo(FieldPath.documentId(), userId);\n\n        newQuery.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            AttendeeFireBaseHolder attendee = new AttendeeFireBaseHolder();\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                for (QueryDocumentSnapshot document : task.getResult()) {\n                    if (task.isSuccessful()) {\n                        attendee.setName(document.getString(\"name\"));\n                        eventCollection.document(eventId).collection(\"attendeeList\").document(userId).set(attendee)\n                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                    @Override\n                                    public void onSuccess(Void aVoid) {\n                                        Log.d(TAG, \"Welcome !\");\n                                    }\n                                })\n                                .addOnFailureListener(new OnFailureListener() {\n                                    @Override\n                                    public void onFailure(@NonNull Exception e) {\n                                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                                    }\n                                });\n\n                        userCollection.document(userId).update(\"attendeeRoles\", FieldValue.arrayUnion(eventId))\n                                .addOnSuccessListener(new OnSuccessListener<Void>() {\n                                    @Override\n                                    public void onSuccess(Void aVoid) {\n                                        Log.d(TAG, \"Welcome !\");\n                                    }\n                                })\n                                .addOnFailureListener(new OnFailureListener() {\n                                    @Override\n                                    public void onFailure(@NonNull Exception e) {\n                                        Log.w(TAG, \"Please try when you are connected to the internet\", e);\n                                    }\n                                });\n                    }else{\n\n                    }\n\n                }\n            }\n        });\n\n    }\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java
---- a/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(revision fa1f28582f8d564782621a39599c150b4bc98b88)
-+++ b/app/src/main/java/com/example/quantumscan/FireStoreBridge.java	(date 1711865521658)
-@@ -408,6 +408,14 @@
-         imageRef.putFile(imageUri);
-     }
- 
-+    public void updateImage(String EventID, ImageView imageView, Uri imageUri){
-+        StorageReference desertRef = storage.getReference().child(EventID+"jpg");
-+        desertRef.delete();
-+        StorageReference imageRef = storage.getReference().child(EventID + ".jpg");
-+        imageRef.putFile(imageUri);
-+        //displayImage(EventID, imageView);
-+
-+    }
-     public void displayImage(String EventID, ImageView imageView){
-         StorageReference islandRef = this.storage.getReference().child(EventID+".jpg");
- 
-Index: app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\n\npublic class OrganizerUpdatePoster extends AppCompatActivity {\n    private static final int PICK_IMAGE_REQUEST = 1;\n    private static final int PERMISSION_REQUEST_STORAGE = 2;\n\n    private ImageView imageView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_event_update_poster);\n\n        imageView = findViewById(R.id.image_view);\n        Button btnSelectImage = findViewById(R.id.button_choose_image);\n        Button backButton = findViewById(R.id.returnButton);\n\n        btnSelectImage.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (ContextCompat.checkSelfPermission(OrganizerUpdatePoster.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                    ActivityCompat.requestPermissions(OrganizerUpdatePoster.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_STORAGE);\n                } else {\n                    openGallery();\n                }\n            }\n        });\n\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                finish();\n            }\n        });\n    }\n\n    private void openGallery() {\n        Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n        startActivityForResult(intent, PICK_IMAGE_REQUEST);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == PERMISSION_REQUEST_STORAGE) {\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                openGallery();\n            }\n        }\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {\n            Uri imageUri = data.getData();\n            imageView.setImageURI(imageUri);\n        }\n    }\n}\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java b/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java	(revision fa1f28582f8d564782621a39599c150b4bc98b88)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerUpdatePoster.java	(date 1711865521666)
-@@ -1,6 +1,7 @@
- package com.example.quantumscan;
- 
- import android.Manifest;
-+import android.app.Activity;
- import android.content.Intent;
- import android.content.pm.PackageManager;
- import android.net.Uri;
-@@ -8,6 +9,10 @@
- import android.view.View;
- import android.widget.Button;
- import android.widget.ImageView;
-+import android.widget.Toast;
-+
-+import androidx.activity.result.ActivityResultLauncher;
-+import androidx.activity.result.contract.ActivityResultContracts;
- import androidx.annotation.NonNull;
- import androidx.appcompat.app.AppCompatActivity;
- import androidx.core.app.ActivityCompat;
-@@ -18,7 +23,21 @@
-     private static final int PERMISSION_REQUEST_STORAGE = 2;
- 
-     private ImageView imageView;
-+    private SelectImage selectImage;
- 
-+    private String eventID;
-+    private String eventName;
-+    private Uri imageUri = null;
-+    private final ActivityResultLauncher<Intent> activityResultLauncher =
-+            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
-+                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
-+                    imageUri = result.getData().getData();
-+                    this.imageUpdate(eventID, imageView, imageUri);
-+
-+                } else {
-+                    Toast.makeText(OrganizerUpdatePoster.this, "Please select an image", Toast.LENGTH_SHORT).show();
-+                }
-+            });
-     @Override
-     protected void onCreate(Bundle savedInstanceState) {
-         super.onCreate(savedInstanceState);
-@@ -28,6 +47,16 @@
-         Button btnSelectImage = findViewById(R.id.button_choose_image);
-         Button backButton = findViewById(R.id.returnButton);
- 
-+        eventID = getIntent().getStringExtra("eventID");
-+        eventName = getIntent().getStringExtra("eventName");
-+        //System.out.println("EventID"+eventID);
-+        //System.out.println("EventName"+eventName);
-+        //this.imageDisplay(eventID, imageView);
-+        selectImage = new SelectImage(this, activityResultLauncher);
-+        btnSelectImage.setOnClickListener(v -> selectImage.pickImage());
-+
-+        //this.imageDisplay(eventID, imageView);
-+        /*
-         btnSelectImage.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-@@ -38,7 +67,7 @@
-                 }
-             }
-         });
--
-+        */
-         backButton.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-@@ -47,6 +76,15 @@
-         });
-     }
- 
-+    public void imageDisplay(String EventID, ImageView imageView){
-+        FireStoreBridge fb_events = new FireStoreBridge("EVENT");
-+        fb_events.displayImage(EventID, imageView);
-+    }
-+    public void imageUpdate(String EventID, ImageView imageView, Uri imageUri){
-+        FireStoreBridge fb_events = new FireStoreBridge("EVENT");
-+        fb_events.updateImage(EventID, imageView, imageUri);
-+    }
-+    /*
-     private void openGallery() {
-         Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-         startActivityForResult(intent, PICK_IMAGE_REQUEST);
-@@ -70,5 +108,8 @@
-             imageView.setImageURI(imageUri);
-         }
-     }
-+
-+     */
-+
- }
- 
-Index: app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.google.firebase.storage.StorageReference;\nimport com.google.firebase.storage.FirebaseStorage;\n\nimport com.google.firebase.storage.UploadTask;\n\npublic class OrganizerCreateEvent extends AppCompatActivity {\n\n    private SelectImage selectImage;\n    private Uri imageUri = null;\n    private String userID;\n    private FireStoreBridge fb  = new FireStoreBridge(\"EVENT\");\n    // FirebaseStorage storage = FirebaseStorage.getInstance();\n\n    // Create an ActivityResultLauncher instance directly within the Activity\n\n    public interface imageUrlUploadListener{\n        void updateEventImage(String eventId, String imageURL);\n        void uploadEventImage(Event newEvent ,String evenID, Uri imageURI);\n    }\n\n    // REFERENCE CODE LINK: https://github.com/Everyday-Programmer/Upload-Image-to-Firebase-Android/blob/main/app/src/main/java/com/example/uploadimagefirebase/MainActivity.java\n    private final ActivityResultLauncher<Intent> activityResultLauncher =\n            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n                if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {\n                    imageUri = result.getData().getData();\n                    System.out.println(imageUri);\n                    // Handle the imageUri, e.g., display it or prepare it for upload\n\n                        //imageUrlUploadListener listener = null;\n                        //listener.updateEventImage(\"asdf\", imageUri.toString());\n                } else {\n                    Toast.makeText(OrganizerCreateEvent.this, \"Please select an image\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_create);\n        userID = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);\n        // Components from this page\n        Button buttonReturn = (Button)findViewById(R.id.returnButton);\n        Button buttonSave = (Button)findViewById(R.id.saveButton);\n        Button buttonPickImage = (Button) findViewById(R.id.picButton);\n        EditText editTextName = (EditText) findViewById(R.id.nameEditText);\n        EditText editTextInfo = (EditText) findViewById(R.id.infoEditText);\n        EditText editTextID = (EditText) findViewById(R.id.idEditText);\n\n        String nameText;\n        String infoText;\n        //String idText;\n\n        selectImage = new SelectImage(this, activityResultLauncher);\n        buttonPickImage.setOnClickListener(v -> selectImage.pickImage());\n\n\n\n\n\n        buttonReturn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    finish();\n            }\n        });\n\n        buttonSave.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n                System.out.println(\"imageUri after pick \" + imageUri);\n\n                String nameText = editTextName.getText().toString();\n                String infoText = editTextInfo.getText().toString();\n                Event newEvent = new Event();\n                newEvent.EventIdGenerator(userID);\n                newEvent.setDescription(infoText);\n                newEvent.setTitle(nameText);\n\n                String EventID = newEvent.getId();\n\n                fb.uploadEventImage(newEvent, EventID, imageUri);\n\n\n\n                fb.updateEvent(newEvent,userID);\n\n                Intent returnIntent = new Intent();\n                returnIntent.putExtra(\"eventID\", newEvent.getId());\n                returnIntent.putExtra(\"eventName\", newEvent.getTitle());\n                setResult(Activity.RESULT_OK, returnIntent);\n                finish();\n\n            }\n\n\n        });\n\n\n    }\n\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(revision fa1f28582f8d564782621a39599c150b4bc98b88)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerCreateEvent.java	(date 1711865521673)
-@@ -40,10 +40,7 @@
-                 if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
-                     imageUri = result.getData().getData();
-                     System.out.println(imageUri);
--                    // Handle the imageUri, e.g., display it or prepare it for upload
- 
--                        //imageUrlUploadListener listener = null;
--                        //listener.updateEventImage("asdf", imageUri.toString());
-                 } else {
-                     Toast.makeText(OrganizerCreateEvent.this, "Please select an image", Toast.LENGTH_SHORT).show();
-                 }
-@@ -68,10 +65,6 @@
-         selectImage = new SelectImage(this, activityResultLauncher);
-         buttonPickImage.setOnClickListener(v -> selectImage.pickImage());
- 
--
--
--
--
-         buttonReturn.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-Index: app/src/main/java/com/example/quantumscan/OrganizerEventPage.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.quantumscan;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class OrganizerEventPage extends AppCompatActivity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.organizer_event_homepage);\n\n        TextView eventNameView = findViewById(R.id.textView_eventName);\n        Button backButton = findViewById(R.id.returnButton);\n        Button infoButton = findViewById(R.id.buttonInfo);\n        Button listButton = findViewById(R.id.buttonViewAttend);\n        Button posterButton = findViewById(R.id.buttonPoster);\n\n        // Retrieve the city name passed from MainActivity\n        String eventID = getIntent().getStringExtra(\"eventID\");\n        String eventName = getIntent().getStringExtra(\"eventName\");\n        eventNameView.setText(eventName);\n\n        /*\n        Event eventOBJ = DataHolder.getInstance().getEvent(eventID);\n        System.out.println(\"Title:\"+ eventOBJ.getTitle());\n\n         */\n\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Go back to MainActivity\n                finish();\n            }\n        });\n\n        infoButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerEventInfo.class);\n                detailIntent.putExtra(\"eventID\", eventID);\n                detailIntent.putExtra(\"eventName\", eventName);\n                startActivity(detailIntent);\n            }\n        });\n\n        listButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerViewAttendees.class);\n                detailIntent.putExtra(\"eventID\", eventID);\n                detailIntent.putExtra(\"eventName\", eventName);\n                startActivity(detailIntent);\n            }\n        });\n\n        posterButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);\n                startActivity(intent);\n            }\n        });\n    }\n\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java b/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java
---- a/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java	(revision fa1f28582f8d564782621a39599c150b4bc98b88)
-+++ b/app/src/main/java/com/example/quantumscan/OrganizerEventPage.java	(date 1711865521678)
-@@ -62,8 +62,10 @@
-         posterButton.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
--                Intent intent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);
--                startActivity(intent);
-+                Intent detailIntent = new Intent(OrganizerEventPage.this, OrganizerUpdatePoster.class);
-+                detailIntent.putExtra("eventID", eventID);
-+                detailIntent.putExtra("eventName", eventName);
-+                startActivity(detailIntent);
-             }
-         });
-     }
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <value>\n      <entry key=\"app\">\n        <State>\n          <runningDeviceTargetSelectedWithDropDown>\n            <Target>\n              <type value=\"RUNNING_DEVICE_TARGET\" />\n              <deviceKey>\n                <Key>\n                  <type value=\"VIRTUAL_DEVICE_PATH\" />\n                  <value value=\"C:\\Users\\zhouw\\.android\\avd\\Pixel_5_API_34.avd\" />\n                </Key>\n              </deviceKey>\n            </Target>\n          </runningDeviceTargetSelectedWithDropDown>\n          <timeTargetWasSelectedWithDropDown value=\"2024-04-07T01:02:19.452530700Z\" />\n        </State>\n      </entry>\n    </value>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 474ba9c86bd13e85835223e11f1e7614514de3f4)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1712464471644)
@@ -3,20 +3,7 @@
   <component name="deploymentTargetDropDown">
     <value>
       <entry key="app">
-        <State>
-          <runningDeviceTargetSelectedWithDropDown>
-            <Target>
-              <type value="RUNNING_DEVICE_TARGET" />
-              <deviceKey>
-                <Key>
-                  <type value="VIRTUAL_DEVICE_PATH" />
-                  <value value="C:\Users\zhouw\.android\avd\Pixel_5_API_34.avd" />
-                </Key>
-              </deviceKey>
-            </Target>
-          </runningDeviceTargetSelectedWithDropDown>
-          <timeTargetWasSelectedWithDropDown value="2024-04-07T01:02:19.452530700Z" />
-        </State>
+        <State />
       </entry>
     </value>
   </component>
